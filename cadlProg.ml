(* File automatically generated by CADL *)
open CadlLib
let u_vzero = 0x00;;

let u_vone = 0x01;;

let u_vtwo = 0x02;;

let u_vthree = 0x03;;

let u_vfour = 0x04;;

let u_vfive = 0x05;;

let u_vleft = 0x4c;;

let u_vright = 0x52;;

let u_va = 0x61;;

let u_vb = 0x62;;

let u_vx = 0x58;;

let u_vy = 0x59;;

let u_vblank = 0x20;;

let u_VFSM = (cMatrixMake (10, 5, 8) [|u_vzero; u_va; u_vone; u_vx; u_vright; u_vzero; u_vy; u_vthree; u_vy; u_vright; u_vone; u_va; u_vone; u_va; u_vright; u_vone; u_vy; u_vone; u_vy; u_vright; u_vone; u_vb; u_vtwo; u_vy; u_vleft; u_vtwo; u_va; u_vtwo; u_va; u_vleft; u_vtwo; u_vy; u_vtwo; u_vy; u_vleft; u_vtwo; u_vx; u_vzero; u_vx; u_vright; u_vthree; u_vy; u_vthree; u_vy; u_vright; u_vthree; u_vblank; u_vfour; u_vblank; u_vright|]);;

let rec u_fSymbolAt u_VTape u_vPos u_vBlank = begin
    let u_vTapeLen = (cY u_VTape) in
  if ((u_vPos >= u_vTapeLen)) then begin
    u_vBlank
  end else begin
    (cMatrixSingle u_VTape (0, u_vPos, 7, 0))
  end
end;;

let rec u_FReplaceSymbol u_VTape u_vPos u_vSymbol = begin
    let u_vLen = (cY u_VTape) in
    let u_vLenRet =   if ((u_vPos == u_vLen)) then begin
    u_vLen + 1
    ;
  end else begin
    u_vLen
  end
 in
  let u_VRet = (cMatrixMake (1, u_vLenRet, 8) [|0x00|]) in
  for u_vCnt=0 to (u_vLenRet - 1) do
    if ((u_vCnt == u_vPos)) then begin
      u_VRet.(0).(u_vCnt) <- u_vSymbol
    end else begin
      u_VRet.(0).(u_vCnt) <- (cMatrixSingle u_VTape (0, u_vCnt, 7, 0));
    end
  done
  ;
  u_VRet
end;;

let rec u_fAcceptState u_VStates u_vState = begin
    let u_vY = (cY u_VStates) in
  let u_VRes = (cMatrixMake (1, 1, 8) [|0x00|]) in
  for u_vCnt0=0 to (u_vY - 1) do
    if (((cMatrixSingle u_VStates (0, u_vCnt0, 7, 0)) == u_vState)) then begin
      u_VRes.(0).(0) <- 0x01
    end
  done
  ;
    let u_vRet = (cMatrixSingle u_VRes (0, 0, 7, 0)) in
  u_vRet
end;;

let rec u_FTransState u_VStates u_vState u_vSymbol = begin
    let u_vX = (cX u_VStates) in
  let u_VRes = (cMatrixMake (1, 3, 8) [|0xff|]) in
  for u_vCnt=0 to (u_vX - 1) do
    if ((((cMatrixSingle u_VStates (u_vCnt, 0, 7, 0)) == u_vState) && ((cMatrixSingle u_VStates (u_vCnt, 1, 7, 0)) == u_vSymbol))) then begin
      u_VRes.(0).(0) <- (cMatrixSingle u_VStates (u_vCnt, 2, 7, 0));
      u_VRes.(0).(1) <- (cMatrixSingle u_VStates (u_vCnt, 3, 7, 0));
      u_VRes.(0).(2) <- (cMatrixSingle u_VStates (u_vCnt, 4, 7, 0))
    end
  done
  ;
  u_VRes
end;;

let rec u_fTrace u_VTape u_vState u_vHeadPos u_vBlank u_vMaxLen = begin
    let u_vCurTapeLen = (cY u_VTape) in
    let u_vTraceLen =   if ((u_vCurTapeLen + 2 >= u_vMaxLen)) then begin
    u_vCurTapeLen + 2
  end else begin
    u_vMaxLen
  end
 in
  let u_VTrace = (cMatrixMake (1, u_vTraceLen, 8) [|0x00|]) in
  for u_vCnt=0 to (u_vCurTapeLen - 1) do
    u_VTrace.(0).(u_vCnt + 2) <- (cMatrixSingle u_VTape (0, u_vCnt, 7, 0))
  done
  ;
  u_VTrace.(0).(0) <- u_vState;
  u_VTrace.(0).(1) <- u_vHeadPos;
  cPrintMvar u_VTrace "VTrace"end;;

let rec u_fSimulate u_VTape u_VAccepts u_VStates u_vState u_vHeadPos u_vBlank = begin
  (u_fTrace (u_VTape) (u_vState) (u_vHeadPos) (u_vBlank) (16))
  ;
    let u_vRet =   if ((u_vState == 0xff)) then begin
    0xff
  end else begin
    if ((0x01 == (u_fAcceptState (u_VAccepts) (u_vState)))) then begin
      0x01
    end else begin
            let u_vSymbol = (u_fSymbolAt (u_VTape) (u_vHeadPos) (u_vBlank)) in
      let u_VNewState = (u_FTransState (u_VStates) (u_vState) (u_vSymbol)) in
            let u_vNState = (cMatrixSingle u_VNewState (0, 0, 7, 0)) in
            let u_vNSymbol = (cMatrixSingle u_VNewState (0, 1, 7, 0)) in
      let u_VNTape = (u_FReplaceSymbol (u_VTape) (u_vHeadPos) (u_vNSymbol)) in
            let u_vNDir = (cMatrixSingle u_VNewState (0, 2, 7, 0)) in
            let u_vNHeadPos =       if ((u_vNDir == u_vleft)) then begin
        u_vHeadPos - 1
      end else begin
        u_vHeadPos + 1
      end
       in
      (u_fSimulate (u_VNTape) (u_VAccepts) (u_VStates) (u_vNState) (u_vNHeadPos) (u_vBlank))
    end
  end
 in
  u_vRet
end;;

let u_VInitTape = (cMatrixMake (1, 4, 8) [|u_va; u_va; u_vb; u_vb|]);;

let u_VAcptStates = (cMatrixMake (1, 1, 8) [|u_vfour|]);;

let u_vTuringTestRes = (u_fSimulate (u_VInitTape) (u_VAcptStates) (u_VFSM) (u_vzero) (0) (u_vblank));;


let _= cPrintSvar u_vTuringTestRes "vTuringTestRes";;


(*INFO: Work DONE!*)

