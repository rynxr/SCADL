// Generated from CADL.g4 by ANTLR 4.5.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var CADLListener = require('./CADLListener').CADLListener;
var CADLVisitor = require('./CADLVisitor').CADLVisitor;


  String.prototype.times = function(n) { return (n > 0) ? Array.prototype.join.call({length:n+1}, this) : ""; };

var grammarFileName = "CADL.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003M\u02a6\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0007\u0002D\n\u0002\f\u0002\u000e\u0002G\u000b\u0002\u0003",
    "\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005",
    "\u0004U\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005c\n\u0005\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005",
    "\u0006y\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005",
    "\u0007\u0097\n\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0007\u0007\u00f8\n\u0007\f\u0007\u000e\u0007\u00fb\u000b",
    "\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0005\b\u0111\n\b\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u011c\n\t\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005",
    "\n\u0127\n\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u0139\n\f\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0007",
    "\r\u0145\n\r\f\r\u000e\r\u0148\u000b\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0005\r\u0151\n\r\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0007\u000e\u015d\n\u000e\f\u000e\u000e\u000e",
    "\u0160\u000b\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0169\n\u000e\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0005\u0011\u0185\n\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u018e",
    "\n\u0011\u0007\u0011\u0190\n\u0011\f\u0011\u000e\u0011\u0193\u000b\u0011",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0005\u0012\u01b9\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0007\u0012\u020e\n\u0012\f\u0012\u000e\u0012\u0211",
    "\u000b\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0006\u0013",
    "\u0217\n\u0013\r\u0013\u000e\u0013\u0218\u0003\u0013\u0003\u0013\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u023a",
    "\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0005\u0016\u0249\n\u0016\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0255\n\u0017\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0262\n",
    "\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u0276\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0007\u001a\u0282\n\u001a\f\u001a\u000e\u001a\u0285\u000b",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0005\u001a\u0294\n\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0005\u001d\u02a4\n\u001d\u0003\u001d\u0002\u0004\f\"\u001e\u0002\u0004",
    "\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ",
    "\"$&(*,.02468\u0002\u0005\u0003\u0002LM\u0003\u0002FG\u0003\u0002@A",
    "\u02e1\u0002E\u0003\u0002\u0002\u0002\u0004H\u0003\u0002\u0002\u0002",
    "\u0006T\u0003\u0002\u0002\u0002\bb\u0003\u0002\u0002\u0002\nx\u0003",
    "\u0002\u0002\u0002\f\u0096\u0003\u0002\u0002\u0002\u000e\u0110\u0003",
    "\u0002\u0002\u0002\u0010\u0112\u0003\u0002\u0002\u0002\u0012\u0126\u0003",
    "\u0002\u0002\u0002\u0014\u0128\u0003\u0002\u0002\u0002\u0016\u0138\u0003",
    "\u0002\u0002\u0002\u0018\u0150\u0003\u0002\u0002\u0002\u001a\u0168\u0003",
    "\u0002\u0002\u0002\u001c\u016a\u0003\u0002\u0002\u0002\u001e\u0174\u0003",
    "\u0002\u0002\u0002 \u0184\u0003\u0002\u0002\u0002\"\u01b8\u0003\u0002",
    "\u0002\u0002$\u0212\u0003\u0002\u0002\u0002&\u0239\u0003\u0002\u0002",
    "\u0002(\u023b\u0003\u0002\u0002\u0002*\u0248\u0003\u0002\u0002\u0002",
    ",\u0254\u0003\u0002\u0002\u0002.\u0256\u0003\u0002\u0002\u00020\u0275",
    "\u0003\u0002\u0002\u00022\u0293\u0003\u0002\u0002\u00024\u0295\u0003",
    "\u0002\u0002\u00026\u029a\u0003\u0002\u0002\u00028\u02a3\u0003\u0002",
    "\u0002\u0002:;\u0005\b\u0005\u0002;<\b\u0002\u0001\u0002<D\u0003\u0002",
    "\u0002\u0002=>\u0005\u0004\u0003\u0002>?\b\u0002\u0001\u0002?D\u0003",
    "\u0002\u0002\u0002@A\u0005\u0006\u0004\u0002AB\b\u0002\u0001\u0002B",
    "D\u0003\u0002\u0002\u0002C:\u0003\u0002\u0002\u0002C=\u0003\u0002\u0002",
    "\u0002C@\u0003\u0002\u0002\u0002DG\u0003\u0002\u0002\u0002EC\u0003\u0002",
    "\u0002\u0002EF\u0003\u0002\u0002\u0002F\u0003\u0003\u0002\u0002\u0002",
    "GE\u0003\u0002\u0002\u0002HI\t\u0002\u0002\u0002I\u0005\u0003\u0002",
    "\u0002\u0002JK\u00079\u0002\u0002KL\u0005*\u0016\u0002LM\u0007\b\u0002",
    "\u0002MN\b\u0004\u0001\u0002NU\u0003\u0002\u0002\u0002OP\u00079\u0002",
    "\u0002PQ\u0005,\u0017\u0002QR\u0007\b\u0002\u0002RS\b\u0004\u0001\u0002",
    "SU\u0003\u0002\u0002\u0002TJ\u0003\u0002\u0002\u0002TO\u0003\u0002\u0002",
    "\u0002U\u0007\u0003\u0002\u0002\u0002VW\u0005\n\u0006\u0002WX\b\u0005",
    "\u0001\u0002Xc\u0003\u0002\u0002\u0002YZ\u0005\u000e\b\u0002Z[\b\u0005",
    "\u0001\u0002[c\u0003\u0002\u0002\u0002\\]\u0005\u0010\t\u0002]^\b\u0005",
    "\u0001\u0002^c\u0003\u0002\u0002\u0002_`\u00052\u001a\u0002`a\b\u0005",
    "\u0001\u0002ac\u0003\u0002\u0002\u0002bV\u0003\u0002\u0002\u0002bY\u0003",
    "\u0002\u0002\u0002b\\\u0003\u0002\u0002\u0002b_\u0003\u0002\u0002\u0002",
    "c\t\u0003\u0002\u0002\u0002de\u00072\u0002\u0002ef\u0007@\u0002\u0002",
    "fg\u0007\u0004\u0002\u0002gh\u0005\f\u0007\u0002hi\u0007\b\u0002\u0002",
    "ij\b\u0006\u0001\u0002jy\u0003\u0002\u0002\u0002kl\u00072\u0002\u0002",
    "lm\u0007@\u0002\u0002mn\u0007\u0004\u0002\u0002no\u0005$\u0013\u0002",
    "op\u0007\b\u0002\u0002pq\b\u0006\u0001\u0002qy\u0003\u0002\u0002\u0002",
    "rs\u0007<\u0002\u0002st\u0007\t\u0002\u0002tu\u0007@\u0002\u0002uv\u0007",
    "\t\u0002\u0002vw\u0007\b\u0002\u0002wy\b\u0006\u0001\u0002xd\u0003\u0002",
    "\u0002\u0002xk\u0003\u0002\u0002\u0002xr\u0003\u0002\u0002\u0002y\u000b",
    "\u0003\u0002\u0002\u0002z{\b\u0007\u0001\u0002{|\u0007&\u0002\u0002",
    "|}\u0005\f\u0007\f}~\b\u0007\u0001\u0002~\u0097\u0003\u0002\u0002\u0002",
    "\u007f\u0080\u0007#\u0002\u0002\u0080\u0081\u0005\f\u0007\t\u0081\u0082",
    "\b\u0007\u0001\u0002\u0082\u0097\u0003\u0002\u0002\u0002\u0083\u0084",
    "\u0007\t\u0002\u0002\u0084\u0085\u0005\f\u0007\u0002\u0085\u0086\u0007",
    "\n\u0002\u0002\u0086\u0087\b\u0007\u0001\u0002\u0087\u0097\u0003\u0002",
    "\u0002\u0002\u0088\u0089\u0007@\u0002\u0002\u0089\u0097\b\u0007\u0001",
    "\u0002\u008a\u008b\u0005\u0014\u000b\u0002\u008b\u008c\b\u0007\u0001",
    "\u0002\u008c\u0097\u0003\u0002\u0002\u0002\u008d\u008e\u0005\u0012\n",
    "\u0002\u008e\u008f\b\u0007\u0001\u0002\u008f\u0097\u0003\u0002\u0002",
    "\u0002\u0090\u0091\u0005\u001a\u000e\u0002\u0091\u0092\b\u0007\u0001",
    "\u0002\u0092\u0097\u0003\u0002\u0002\u0002\u0093\u0094\u00058\u001d",
    "\u0002\u0094\u0095\b\u0007\u0001\u0002\u0095\u0097\u0003\u0002\u0002",
    "\u0002\u0096z\u0003\u0002\u0002\u0002\u0096\u007f\u0003\u0002\u0002",
    "\u0002\u0096\u0083\u0003\u0002\u0002\u0002\u0096\u0088\u0003\u0002\u0002",
    "\u0002\u0096\u008a\u0003\u0002\u0002\u0002\u0096\u008d\u0003\u0002\u0002",
    "\u0002\u0096\u0090\u0003\u0002\u0002\u0002\u0096\u0093\u0003\u0002\u0002",
    "\u0002\u0097\u00f9\u0003\u0002\u0002\u0002\u0098\u0099\f\u001d\u0002",
    "\u0002\u0099\u009a\u0007\u0014\u0002\u0002\u009a\u009b\u0005\f\u0007",
    "\u001e\u009b\u009c\b\u0007\u0001\u0002\u009c\u00f8\u0003\u0002\u0002",
    "\u0002\u009d\u009e\f\u001c\u0002\u0002\u009e\u009f\u0007\u0013\u0002",
    "\u0002\u009f\u00a0\u0005\f\u0007\u001d\u00a0\u00a1\b\u0007\u0001\u0002",
    "\u00a1\u00f8\u0003\u0002\u0002\u0002\u00a2\u00a3\f\u001b\u0002\u0002",
    "\u00a3\u00a4\u0007\u0015\u0002\u0002\u00a4\u00a5\u0005\f\u0007\u001c",
    "\u00a5\u00a6\b\u0007\u0001\u0002\u00a6\u00f8\u0003\u0002\u0002\u0002",
    "\u00a7\u00a8\f\u001a\u0002\u0002\u00a8\u00a9\u0007\u0016\u0002\u0002",
    "\u00a9\u00aa\u0005\f\u0007\u001b\u00aa\u00ab\b\u0007\u0001\u0002\u00ab",
    "\u00f8\u0003\u0002\u0002\u0002\u00ac\u00ad\f\u0019\u0002\u0002\u00ad",
    "\u00ae\u0007\u0011\u0002\u0002\u00ae\u00af\u0005\f\u0007\u001a\u00af",
    "\u00b0\b\u0007\u0001\u0002\u00b0\u00f8\u0003\u0002\u0002\u0002\u00b1",
    "\u00b2\f\u0018\u0002\u0002\u00b2\u00b3\u0007\u0012\u0002\u0002\u00b3",
    "\u00b4\u0005\f\u0007\u0019\u00b4\u00b5\b\u0007\u0001\u0002\u00b5\u00f8",
    "\u0003\u0002\u0002\u0002\u00b6\u00b7\f\u0017\u0002\u0002\u00b7\u00b8",
    "\u0007\u001b\u0002\u0002\u00b8\u00b9\u0005\f\u0007\u0018\u00b9\u00ba",
    "\b\u0007\u0001\u0002\u00ba\u00f8\u0003\u0002\u0002\u0002\u00bb\u00bc",
    "\f\u0016\u0002\u0002\u00bc\u00bd\u0007\u001c\u0002\u0002\u00bd\u00be",
    "\u0005\f\u0007\u0017\u00be\u00bf\b\u0007\u0001\u0002\u00bf\u00f8\u0003",
    "\u0002\u0002\u0002\u00c0\u00c1\f\u0015\u0002\u0002\u00c1\u00c2\u0007",
    "\u001f\u0002\u0002\u00c2\u00c3\u0005\f\u0007\u0016\u00c3\u00c4\b\u0007",
    "\u0001\u0002\u00c4\u00f8\u0003\u0002\u0002\u0002\u00c5\u00c6\f\u0014",
    "\u0002\u0002\u00c6\u00c7\u0007 \u0002\u0002\u00c7\u00c8\u0005\f\u0007",
    "\u0015\u00c8\u00c9\b\u0007\u0001\u0002\u00c9\u00f8\u0003\u0002\u0002",
    "\u0002\u00ca\u00cb\f\u0013\u0002\u0002\u00cb\u00cc\u0007\u001e\u0002",
    "\u0002\u00cc\u00cd\u0005\f\u0007\u0014\u00cd\u00ce\b\u0007\u0001\u0002",
    "\u00ce\u00f8\u0003\u0002\u0002\u0002\u00cf\u00d0\f\u0012\u0002\u0002",
    "\u00d0\u00d1\u0007\u001d\u0002\u0002\u00d1\u00d2\u0005\f\u0007\u0013",
    "\u00d2\u00d3\b\u0007\u0001\u0002\u00d3\u00f8\u0003\u0002\u0002\u0002",
    "\u00d4\u00d5\f\u0011\u0002\u0002\u00d5\u00d6\u0007(\u0002\u0002\u00d6",
    "\u00d7\u0005\f\u0007\u0012\u00d7\u00d8\b\u0007\u0001\u0002\u00d8\u00f8",
    "\u0003\u0002\u0002\u0002\u00d9\u00da\f\u0010\u0002\u0002\u00da\u00db",
    "\u0007)\u0002\u0002\u00db\u00dc\u0005\f\u0007\u0011\u00dc\u00dd\b\u0007",
    "\u0001\u0002\u00dd\u00f8\u0003\u0002\u0002\u0002\u00de\u00df\f\u000f",
    "\u0002\u0002\u00df\u00e0\u0007$\u0002\u0002\u00e0\u00e1\u0005\f\u0007",
    "\u0010\u00e1\u00e2\b\u0007\u0001\u0002\u00e2\u00f8\u0003\u0002\u0002",
    "\u0002\u00e3\u00e4\f\u000e\u0002\u0002\u00e4\u00e5\u0007%\u0002\u0002",
    "\u00e5\u00e6\u0005\f\u0007\u000f\u00e6\u00e7\b\u0007\u0001\u0002\u00e7",
    "\u00f8\u0003\u0002\u0002\u0002\u00e8\u00e9\f\r\u0002\u0002\u00e9\u00ea",
    "\u0007\'\u0002\u0002\u00ea\u00eb\u0005\f\u0007\u000e\u00eb\u00ec\b\u0007",
    "\u0001\u0002\u00ec\u00f8\u0003\u0002\u0002\u0002\u00ed\u00ee\f\u000b",
    "\u0002\u0002\u00ee\u00ef\u0007!\u0002\u0002\u00ef\u00f0\u0005\f\u0007",
    "\f\u00f0\u00f1\b\u0007\u0001\u0002\u00f1\u00f8\u0003\u0002\u0002\u0002",
    "\u00f2\u00f3\f\n\u0002\u0002\u00f3\u00f4\u0007\"\u0002\u0002\u00f4\u00f5",
    "\u0005\f\u0007\u000b\u00f5\u00f6\b\u0007\u0001\u0002\u00f6\u00f8\u0003",
    "\u0002\u0002\u0002\u00f7\u0098\u0003\u0002\u0002\u0002\u00f7\u009d\u0003",
    "\u0002\u0002\u0002\u00f7\u00a2\u0003\u0002\u0002\u0002\u00f7\u00a7\u0003",
    "\u0002\u0002\u0002\u00f7\u00ac\u0003\u0002\u0002\u0002\u00f7\u00b1\u0003",
    "\u0002\u0002\u0002\u00f7\u00b6\u0003\u0002\u0002\u0002\u00f7\u00bb\u0003",
    "\u0002\u0002\u0002\u00f7\u00c0\u0003\u0002\u0002\u0002\u00f7\u00c5\u0003",
    "\u0002\u0002\u0002\u00f7\u00ca\u0003\u0002\u0002\u0002\u00f7\u00cf\u0003",
    "\u0002\u0002\u0002\u00f7\u00d4\u0003\u0002\u0002\u0002\u00f7\u00d9\u0003",
    "\u0002\u0002\u0002\u00f7\u00de\u0003\u0002\u0002\u0002\u00f7\u00e3\u0003",
    "\u0002\u0002\u0002\u00f7\u00e8\u0003\u0002\u0002\u0002\u00f7\u00ed\u0003",
    "\u0002\u0002\u0002\u00f7\u00f2\u0003\u0002\u0002\u0002\u00f8\u00fb\u0003",
    "\u0002\u0002\u0002\u00f9\u00f7\u0003\u0002\u0002\u0002\u00f9\u00fa\u0003",
    "\u0002\u0002\u0002\u00fa\r\u0003\u0002\u0002\u0002\u00fb\u00f9\u0003",
    "\u0002\u0002\u0002\u00fc\u00fd\u00072\u0002\u0002\u00fd\u00fe\u0007",
    "A\u0002\u0002\u00fe\u00ff\u0007\u0004\u0002\u0002\u00ff\u0100\u0005",
    "\"\u0012\u0002\u0100\u0101\u0007\b\u0002\u0002\u0101\u0102\b\b\u0001",
    "\u0002\u0102\u0111\u0003\u0002\u0002\u0002\u0103\u0104\u00072\u0002",
    "\u0002\u0104\u0105\u0007A\u0002\u0002\u0105\u0106\u0007\u0004\u0002",
    "\u0002\u0106\u0107\u0005$\u0013\u0002\u0107\u0108\u0007\b\u0002\u0002",
    "\u0108\u0109\b\b\u0001\u0002\u0109\u0111\u0003\u0002\u0002\u0002\u010a",
    "\u010b\u0007<\u0002\u0002\u010b\u010c\u0007\t\u0002\u0002\u010c\u010d",
    "\u0007A\u0002\u0002\u010d\u010e\u0007\t\u0002\u0002\u010e\u010f\u0007",
    "\b\u0002\u0002\u010f\u0111\b\b\u0001\u0002\u0110\u00fc\u0003\u0002\u0002",
    "\u0002\u0110\u0103\u0003\u0002\u0002\u0002\u0110\u010a\u0003\u0002\u0002",
    "\u0002\u0111\u000f\u0003\u0002\u0002\u0002\u0112\u0113\u00073\u0002",
    "\u0002\u0113\u0114\u0005\u0014\u000b\u0002\u0114\u0115\b\t\u0001\u0002",
    "\u0115\u0116\u0007\u0004\u0002\u0002\u0116\u0117\b\t\u0001\u0002\u0117",
    "\u0118\u0005\f\u0007\u0002\u0118\u011b\b\t\u0001\u0002\u0119\u011a\u0007",
    "\b\u0002\u0002\u011a\u011c\b\t\u0001\u0002\u011b\u0119\u0003\u0002\u0002",
    "\u0002\u011b\u011c\u0003\u0002\u0002\u0002\u011c\u0011\u0003\u0002\u0002",
    "\u0002\u011d\u011e\u0007A\u0002\u0002\u011e\u011f\u0007B\u0002\u0002",
    "\u011f\u0127\b\n\u0001\u0002\u0120\u0121\u0007A\u0002\u0002\u0121\u0122",
    "\u0007C\u0002\u0002\u0122\u0127\b\n\u0001\u0002\u0123\u0124\u0007A\u0002",
    "\u0002\u0124\u0125\u0007D\u0002\u0002\u0125\u0127\b\n\u0001\u0002\u0126",
    "\u011d\u0003\u0002\u0002\u0002\u0126\u0120\u0003\u0002\u0002\u0002\u0126",
    "\u0123\u0003\u0002\u0002\u0002\u0127\u0013\u0003\u0002\u0002\u0002\u0128",
    "\u0129\u0007A\u0002\u0002\u0129\u012a\u0007\u000b\u0002\u0002\u012a",
    "\u012b\u0005\f\u0007\u0002\u012b\u012c\u0007\u0007\u0002\u0002\u012c",
    "\u012d\u0005\f\u0007\u0002\u012d\u012e\u0007\u0007\u0002\u0002\u012e",
    "\u012f\u00054\u001b\u0002\u012f\u0130\u0007\f\u0002\u0002\u0130\u0131",
    "\b\u000b\u0001\u0002\u0131\u0015\u0003\u0002\u0002\u0002\u0132\u0133",
    "\u0005\f\u0007\u0002\u0133\u0134\b\f\u0001\u0002\u0134\u0139\u0003\u0002",
    "\u0002\u0002\u0135\u0136\u0005\"\u0012\u0002\u0136\u0137\b\f\u0001\u0002",
    "\u0137\u0139\u0003\u0002\u0002\u0002\u0138\u0132\u0003\u0002\u0002\u0002",
    "\u0138\u0135\u0003\u0002\u0002\u0002\u0139\u0017\u0003\u0002\u0002\u0002",
    "\u013a\u013b\u0007G\u0002\u0002\u013b\u013c\b\r\u0001\u0002\u013c\u013d",
    "\u0007\t\u0002\u0002\u013d\u013e\b\r\u0001\u0002\u013e\u013f\u0005\u0016",
    "\f\u0002\u013f\u0146\b\r\u0001\u0002\u0140\u0141\u0007\u0007\u0002\u0002",
    "\u0141\u0142\u0005\u0016\f\u0002\u0142\u0143\b\r\u0001\u0002\u0143\u0145",
    "\u0003\u0002\u0002\u0002\u0144\u0140\u0003\u0002\u0002\u0002\u0145\u0148",
    "\u0003\u0002\u0002\u0002\u0146\u0144\u0003\u0002\u0002\u0002\u0146\u0147",
    "\u0003\u0002\u0002\u0002\u0147\u0149\u0003\u0002\u0002\u0002\u0148\u0146",
    "\u0003\u0002\u0002\u0002\u0149\u014a\u0007\n\u0002\u0002\u014a\u014b",
    "\b\r\u0001\u0002\u014b\u0151\u0003\u0002\u0002\u0002\u014c\u014d\u0007",
    "G\u0002\u0002\u014d\u014e\u0007\t\u0002\u0002\u014e\u014f\u0007\n\u0002",
    "\u0002\u014f\u0151\b\r\u0001\u0002\u0150\u013a\u0003\u0002\u0002\u0002",
    "\u0150\u014c\u0003\u0002\u0002\u0002\u0151\u0019\u0003\u0002\u0002\u0002",
    "\u0152\u0153\u0007F\u0002\u0002\u0153\u0154\b\u000e\u0001\u0002\u0154",
    "\u0155\u0007\t\u0002\u0002\u0155\u0156\b\u000e\u0001\u0002\u0156\u0157",
    "\u0005\u0016\f\u0002\u0157\u015e\b\u000e\u0001\u0002\u0158\u0159\u0007",
    "\u0007\u0002\u0002\u0159\u015a\u0005\u0016\f\u0002\u015a\u015b\b\u000e",
    "\u0001\u0002\u015b\u015d\u0003\u0002\u0002\u0002\u015c\u0158\u0003\u0002",
    "\u0002\u0002\u015d\u0160\u0003\u0002\u0002\u0002\u015e\u015c\u0003\u0002",
    "\u0002\u0002\u015e\u015f\u0003\u0002\u0002\u0002\u015f\u0161\u0003\u0002",
    "\u0002\u0002\u0160\u015e\u0003\u0002\u0002\u0002\u0161\u0162\u0007\n",
    "\u0002\u0002\u0162\u0163\b\u000e\u0001\u0002\u0163\u0169\u0003\u0002",
    "\u0002\u0002\u0164\u0165\u0007F\u0002\u0002\u0165\u0166\u0007\t\u0002",
    "\u0002\u0166\u0167\u0007\n\u0002\u0002\u0167\u0169\b\u000e\u0001\u0002",
    "\u0168\u0152\u0003\u0002\u0002\u0002\u0168\u0164\u0003\u0002\u0002\u0002",
    "\u0169\u001b\u0003\u0002\u0002\u0002\u016a\u016b\u0007A\u0002\u0002",
    "\u016b\u016c\u0007\u000b\u0002\u0002\u016c\u016d\u00054\u001b\u0002",
    "\u016d\u016e\u0007\u0007\u0002\u0002\u016e\u016f\u00054\u001b\u0002",
    "\u016f\u0170\u0007\u0007\u0002\u0002\u0170\u0171\u00054\u001b\u0002",
    "\u0171\u0172\u0007\f\u0002\u0002\u0172\u0173\b\u000f\u0001\u0002\u0173",
    "\u001d\u0003\u0002\u0002\u0002\u0174\u0175\u0007A\u0002\u0002\u0175",
    "\u0176\u0007\u000b\u0002\u0002\u0176\u0177\u00056\u001c\u0002\u0177",
    "\u0178\u0007\u0007\u0002\u0002\u0178\u0179\u00056\u001c\u0002\u0179",
    "\u017a\u0007\u0007\u0002\u0002\u017a\u017b\u00054\u001b\u0002\u017b",
    "\u017c\u0007\f\u0002\u0002\u017c\u017d\b\u0010\u0001\u0002\u017d\u001f",
    "\u0003\u0002\u0002\u0002\u017e\u017f\u0005\f\u0007\u0002\u017f\u0180",
    "\b\u0011\u0001\u0002\u0180\u0185\u0003\u0002\u0002\u0002\u0181\u0182",
    "\u0005\u001e\u0010\u0002\u0182\u0183\b\u0011\u0001\u0002\u0183\u0185",
    "\u0003\u0002\u0002\u0002\u0184\u017e\u0003\u0002\u0002\u0002\u0184\u0181",
    "\u0003\u0002\u0002\u0002\u0185\u0191\u0003\u0002\u0002\u0002\u0186\u018d",
    "\u0007\u0007\u0002\u0002\u0187\u0188\u0005\f\u0007\u0002\u0188\u0189",
    "\b\u0011\u0001\u0002\u0189\u018e\u0003\u0002\u0002\u0002\u018a\u018b",
    "\u0005\u001e\u0010\u0002\u018b\u018c\b\u0011\u0001\u0002\u018c\u018e",
    "\u0003\u0002\u0002\u0002\u018d\u0187\u0003\u0002\u0002\u0002\u018d\u018a",
    "\u0003\u0002\u0002\u0002\u018e\u0190\u0003\u0002\u0002\u0002\u018f\u0186",
    "\u0003\u0002\u0002\u0002\u0190\u0193\u0003\u0002\u0002\u0002\u0191\u018f",
    "\u0003\u0002\u0002\u0002\u0191\u0192\u0003\u0002\u0002\u0002\u0192!",
    "\u0003\u0002\u0002\u0002\u0193\u0191\u0003\u0002\u0002\u0002\u0194\u0195",
    "\b\u0012\u0001\u0002\u0195\u0196\u0007&\u0002\u0002\u0196\u0197\u0005",
    "\"\u0012\u000f\u0197\u0198\b\u0012\u0001\u0002\u0198\u01b9\u0003\u0002",
    "\u0002\u0002\u0199\u019a\u0007+\u0002\u0002\u019a\u019b\u0005\"\u0012",
    "\b\u019b\u019c\b\u0012\u0001\u0002\u019c\u01b9\u0003\u0002\u0002\u0002",
    "\u019d\u019e\u0007\t\u0002\u0002\u019e\u019f\u0005\"\u0012\u0002\u019f",
    "\u01a0\u0007\n\u0002\u0002\u01a0\u01a1\b\u0012\u0001\u0002\u01a1\u01b9",
    "\u0003\u0002\u0002\u0002\u01a2\u01a3\u0007A\u0002\u0002\u01a3\u01b9",
    "\b\u0012\u0001\u0002\u01a4\u01a5\u0005\u0018\r\u0002\u01a5\u01a6\b\u0012",
    "\u0001\u0002\u01a6\u01b9\u0003\u0002\u0002\u0002\u01a7\u01a8\u0005\u001c",
    "\u000f\u0002\u01a8\u01a9\b\u0012\u0001\u0002\u01a9\u01b9\u0003\u0002",
    "\u0002\u0002\u01aa\u01ab\u0007?\u0002\u0002\u01ab\u01ac\u0007\u000b",
    "\u0002\u0002\u01ac\u01ad\u0005\f\u0007\u0002\u01ad\u01ae\u0007\u0007",
    "\u0002\u0002\u01ae\u01af\u0005\f\u0007\u0002\u01af\u01b0\u0007\u0007",
    "\u0002\u0002\u01b0\u01b1\u0005\f\u0007\u0002\u01b1\u01b2\u0007\f\u0002",
    "\u0002\u01b2\u01b3\u0007\u0003\u0002\u0002\u01b3\u01b4\u0007\u000b\u0002",
    "\u0002\u01b4\u01b5\u0005 \u0011\u0002\u01b5\u01b6\u0007\f\u0002\u0002",
    "\u01b6\u01b7\b\u0012\u0001\u0002\u01b7\u01b9\u0003\u0002\u0002\u0002",
    "\u01b8\u0194\u0003\u0002\u0002\u0002\u01b8\u0199\u0003\u0002\u0002\u0002",
    "\u01b8\u019d\u0003\u0002\u0002\u0002\u01b8\u01a2\u0003\u0002\u0002\u0002",
    "\u01b8\u01a4\u0003\u0002\u0002\u0002\u01b8\u01a7\u0003\u0002\u0002\u0002",
    "\u01b8\u01aa\u0003\u0002\u0002\u0002\u01b9\u020f\u0003\u0002\u0002\u0002",
    "\u01ba\u01bb\f\u001a\u0002\u0002\u01bb\u01bc\u0007\u0018\u0002\u0002",
    "\u01bc\u01bd\u0005\"\u0012\u001b\u01bd\u01be\b\u0012\u0001\u0002\u01be",
    "\u020e\u0003\u0002\u0002\u0002\u01bf\u01c0\f\u0019\u0002\u0002\u01c0",
    "\u01c1\u0007\u0014\u0002\u0002\u01c1\u01c2\u0005\"\u0012\u001a\u01c2",
    "\u01c3\b\u0012\u0001\u0002\u01c3\u020e\u0003\u0002\u0002\u0002\u01c4",
    "\u01c5\f\u0018\u0002\u0002\u01c5\u01c6\u0007\u001a\u0002\u0002\u01c6",
    "\u01c7\u0005\"\u0012\u0019\u01c7\u01c8\b\u0012\u0001\u0002\u01c8\u020e",
    "\u0003\u0002\u0002\u0002\u01c9\u01ca\f\u0017\u0002\u0002\u01ca\u01cb",
    "\u0007\u0017\u0002\u0002\u01cb\u01cc\u0005\"\u0012\u0018\u01cc\u01cd",
    "\b\u0012\u0001\u0002\u01cd\u020e\u0003\u0002\u0002\u0002\u01ce\u01cf",
    "\f\u0016\u0002\u0002\u01cf\u01d0\u0007\u0013\u0002\u0002\u01d0\u01d1",
    "\u0005\"\u0012\u0017\u01d1\u01d2\b\u0012\u0001\u0002\u01d2\u020e\u0003",
    "\u0002\u0002\u0002\u01d3\u01d4\f\u0015\u0002\u0002\u01d4\u01d5\u0007",
    "\u0019\u0002\u0002\u01d5\u01d6\u0005\"\u0012\u0016\u01d6\u01d7\b\u0012",
    "\u0001\u0002\u01d7\u020e\u0003\u0002\u0002\u0002\u01d8\u01d9\f\u0014",
    "\u0002\u0002\u01d9\u01da\u0007\u0011\u0002\u0002\u01da\u01db\u0005\"",
    "\u0012\u0015\u01db\u01dc\b\u0012\u0001\u0002\u01dc\u020e\u0003\u0002",
    "\u0002\u0002\u01dd\u01de\f\u0013\u0002\u0002\u01de\u01df\u0007\u0012",
    "\u0002\u0002\u01df\u01e0\u0005\"\u0012\u0014\u01e0\u01e1\b\u0012\u0001",
    "\u0002\u01e1\u020e\u0003\u0002\u0002\u0002\u01e2\u01e3\f\u0012\u0002",
    "\u0002\u01e3\u01e4\u0007$\u0002\u0002\u01e4\u01e5\u0005\"\u0012\u0013",
    "\u01e5\u01e6\b\u0012\u0001\u0002\u01e6\u020e\u0003\u0002\u0002\u0002",
    "\u01e7\u01e8\f\u0011\u0002\u0002\u01e8\u01e9\u0007%\u0002\u0002\u01e9",
    "\u01ea\u0005\"\u0012\u0012\u01ea\u01eb\b\u0012\u0001\u0002\u01eb\u020e",
    "\u0003\u0002\u0002\u0002\u01ec\u01ed\f\u0010\u0002\u0002\u01ed\u01ee",
    "\u0007\'\u0002\u0002\u01ee\u01ef\u0005\"\u0012\u0011\u01ef\u01f0\b\u0012",
    "\u0001\u0002\u01f0\u020e\u0003\u0002\u0002\u0002\u01f1\u01f2\f\u000e",
    "\u0002\u0002\u01f2\u01f3\u0007-\u0002\u0002\u01f3\u01f4\u0005\"\u0012",
    "\u000f\u01f4\u01f5\b\u0012\u0001\u0002\u01f5\u020e\u0003\u0002\u0002",
    "\u0002\u01f6\u01f7\f\r\u0002\u0002\u01f7\u01f8\u0007,\u0002\u0002\u01f8",
    "\u01f9\u0005\"\u0012\u000e\u01f9\u01fa\b\u0012\u0001\u0002\u01fa\u020e",
    "\u0003\u0002\u0002\u0002\u01fb\u01fc\f\n\u0002\u0002\u01fc\u01fd\u0007",
    "0\u0002\u0002\u01fd\u01fe\u0005\"\u0012\u000b\u01fe\u01ff\b\u0012\u0001",
    "\u0002\u01ff\u020e\u0003\u0002\u0002\u0002\u0200\u0201\f\t\u0002\u0002",
    "\u0201\u0202\u00071\u0002\u0002\u0202\u0203\u0005\"\u0012\n\u0203\u0204",
    "\b\u0012\u0001\u0002\u0204\u020e\u0003\u0002\u0002\u0002\u0205\u0206",
    "\f\f\u0002\u0002\u0206\u0207\u0007.\u0002\u0002\u0207\u0208\u0007F\u0002",
    "\u0002\u0208\u020e\b\u0012\u0001\u0002\u0209\u020a\f\u000b\u0002\u0002",
    "\u020a\u020b\u0007/\u0002\u0002\u020b\u020c\u0007F\u0002\u0002\u020c",
    "\u020e\b\u0012\u0001\u0002\u020d\u01ba\u0003\u0002\u0002\u0002\u020d",
    "\u01bf\u0003\u0002\u0002\u0002\u020d\u01c4\u0003\u0002\u0002\u0002\u020d",
    "\u01c9\u0003\u0002\u0002\u0002\u020d\u01ce\u0003\u0002\u0002\u0002\u020d",
    "\u01d3\u0003\u0002\u0002\u0002\u020d\u01d8\u0003\u0002\u0002\u0002\u020d",
    "\u01dd\u0003\u0002\u0002\u0002\u020d\u01e2\u0003\u0002\u0002\u0002\u020d",
    "\u01e7\u0003\u0002\u0002\u0002\u020d\u01ec\u0003\u0002\u0002\u0002\u020d",
    "\u01f1\u0003\u0002\u0002\u0002\u020d\u01f6\u0003\u0002\u0002\u0002\u020d",
    "\u01fb\u0003\u0002\u0002\u0002\u020d\u0200\u0003\u0002\u0002\u0002\u020d",
    "\u0205\u0003\u0002\u0002\u0002\u020d\u0209\u0003\u0002\u0002\u0002\u020e",
    "\u0211\u0003\u0002\u0002\u0002\u020f\u020d\u0003\u0002\u0002\u0002\u020f",
    "\u0210\u0003\u0002\u0002\u0002\u0210#\u0003\u0002\u0002\u0002\u0211",
    "\u020f\u0003\u0002\u0002\u0002\u0212\u0216\u0007:\u0002\u0002\u0213",
    "\u0214\u0005&\u0014\u0002\u0214\u0215\b\u0013\u0001\u0002\u0215\u0217",
    "\u0003\u0002\u0002\u0002\u0216\u0213\u0003\u0002\u0002\u0002\u0217\u0218",
    "\u0003\u0002\u0002\u0002\u0218\u0216\u0003\u0002\u0002\u0002\u0218\u0219",
    "\u0003\u0002\u0002\u0002\u0219\u021a\u0003\u0002\u0002\u0002\u021a\u021b",
    "\u0007;\u0002\u0002\u021b%\u0003\u0002\u0002\u0002\u021c\u021d\u0005",
    "\b\u0005\u0002\u021d\u021e\b\u0014\u0001\u0002\u021e\u023a\u0003\u0002",
    "\u0002\u0002\u021f\u0220\u0005(\u0015\u0002\u0220\u0221\b\u0014\u0001",
    "\u0002\u0221\u023a\u0003\u0002\u0002\u0002\u0222\u0223\u0005*\u0016",
    "\u0002\u0223\u0224\b\u0014\u0001\u0002\u0224\u023a\u0003\u0002\u0002",
    "\u0002\u0225\u0226\u0005,\u0017\u0002\u0226\u0227\b\u0014\u0001\u0002",
    "\u0227\u023a\u0003\u0002\u0002\u0002\u0228\u0229\u0005.\u0018\u0002",
    "\u0229\u022a\b\u0014\u0001\u0002\u022a\u023a\u0003\u0002\u0002\u0002",
    "\u022b\u022c\u00050\u0019\u0002\u022c\u022d\b\u0014\u0001\u0002\u022d",
    "\u023a\u0003\u0002\u0002\u0002\u022e\u022f\u0005\f\u0007\u0002\u022f",
    "\u0230\b\u0014\u0001\u0002\u0230\u023a\u0003\u0002\u0002\u0002\u0231",
    "\u0232\u0005\"\u0012\u0002\u0232\u0233\b\u0014\u0001\u0002\u0233\u023a",
    "\u0003\u0002\u0002\u0002\u0234\u0235\u0005$\u0013\u0002\u0235\u0236",
    "\b\u0014\u0001\u0002\u0236\u023a\u0003\u0002\u0002\u0002\u0237\u0238",
    "\u0007\b\u0002\u0002\u0238\u023a\b\u0014\u0001\u0002\u0239\u021c\u0003",
    "\u0002\u0002\u0002\u0239\u021f\u0003\u0002\u0002\u0002\u0239\u0222\u0003",
    "\u0002\u0002\u0002\u0239\u0225\u0003\u0002\u0002\u0002\u0239\u0228\u0003",
    "\u0002\u0002\u0002\u0239\u022b\u0003\u0002\u0002\u0002\u0239\u022e\u0003",
    "\u0002\u0002\u0002\u0239\u0231\u0003\u0002\u0002\u0002\u0239\u0234\u0003",
    "\u0002\u0002\u0002\u0239\u0237\u0003\u0002\u0002\u0002\u023a\'\u0003",
    "\u0002\u0002\u0002\u023b\u023c\u00076\u0002\u0002\u023c\u023d\b\u0015",
    "\u0001\u0002\u023d)\u0003\u0002\u0002\u0002\u023e\u023f\u0007=\u0002",
    "\u0002\u023f\u0240\u0007\t\u0002\u0002\u0240\u0241\u0007@\u0002\u0002",
    "\u0241\u0242\u0007\n\u0002\u0002\u0242\u0249\b\u0016\u0001\u0002\u0243",
    "\u0244\u0007=\u0002\u0002\u0244\u0245\u0007\t\u0002\u0002\u0245\u0246",
    "\u0007A\u0002\u0002\u0246\u0247\u0007\n\u0002\u0002\u0247\u0249\b\u0016",
    "\u0001\u0002\u0248\u023e\u0003\u0002\u0002\u0002\u0248\u0243\u0003\u0002",
    "\u0002\u0002\u0249+\u0003\u0002\u0002\u0002\u024a\u024b\u0007>\u0002",
    "\u0002\u024b\u024c\u0007\t\u0002\u0002\u024c\u024d\u0007@\u0002\u0002",
    "\u024d\u024e\u0007\n\u0002\u0002\u024e\u0255\b\u0017\u0001\u0002\u024f",
    "\u0250\u0007>\u0002\u0002\u0250\u0251\u0007\t\u0002\u0002\u0251\u0252",
    "\u0007A\u0002\u0002\u0252\u0253\u0007\n\u0002\u0002\u0253\u0255\b\u0017",
    "\u0001\u0002\u0254\u024a\u0003\u0002\u0002\u0002\u0254\u024f\u0003\u0002",
    "\u0002\u0002\u0255-\u0003\u0002\u0002\u0002\u0256\u0257\u00077\u0002",
    "\u0002\u0257\u0258\b\u0018\u0001\u0002\u0258\u0259\u0005\f\u0007\u0002",
    "\u0259\u025a\b\u0018\u0001\u0002\u025a\u025b\u0005$\u0013\u0002\u025b",
    "\u0261\b\u0018\u0001\u0002\u025c\u025d\u00078\u0002\u0002\u025d\u025e",
    "\b\u0018\u0001\u0002\u025e\u025f\u0005$\u0013\u0002\u025f\u0260\b\u0018",
    "\u0001\u0002\u0260\u0262\u0003\u0002\u0002\u0002\u0261\u025c\u0003\u0002",
    "\u0002\u0002\u0261\u0262\u0003\u0002\u0002\u0002\u0262/\u0003\u0002",
    "\u0002\u0002\u0263\u0264\u00075\u0002\u0002\u0264\u0265\u0007\t\u0002",
    "\u0002\u0265\u0266\u0007@\u0002\u0002\u0266\u0267\u0007\u0004\u0002",
    "\u0002\u0267\u0268\u0005\f\u0007\u0002\u0268\u0269\u0007\n\u0002\u0002",
    "\u0269\u026a\u0005$\u0013\u0002\u026a\u026b\b\u0019\u0001\u0002\u026b",
    "\u0276\u0003\u0002\u0002\u0002\u026c\u026d\u00074\u0002\u0002\u026d",
    "\u026e\u0007\t\u0002\u0002\u026e\u026f\u0007@\u0002\u0002\u026f\u0270",
    "\u0007\u0004\u0002\u0002\u0270\u0271\u0005\f\u0007\u0002\u0271\u0272",
    "\u0007\n\u0002\u0002\u0272\u0273\u0005$\u0013\u0002\u0273\u0274\b\u0019",
    "\u0001\u0002\u0274\u0276\u0003\u0002\u0002\u0002\u0275\u0263\u0003\u0002",
    "\u0002\u0002\u0275\u026c\u0003\u0002\u0002\u0002\u02761\u0003\u0002",
    "\u0002\u0002\u0277\u0278\u00072\u0002\u0002\u0278\u0279\t\u0003\u0002",
    "\u0002\u0279\u027a\b\u001a\u0001\u0002\u027a\u027b\u0007\t\u0002\u0002",
    "\u027b\u027c\b\u001a\u0001\u0002\u027c\u027d\t\u0004\u0002\u0002\u027d",
    "\u0283\b\u001a\u0001\u0002\u027e\u027f\u0007\u0007\u0002\u0002\u027f",
    "\u0280\t\u0004\u0002\u0002\u0280\u0282\b\u001a\u0001\u0002\u0281\u027e",
    "\u0003\u0002\u0002\u0002\u0282\u0285\u0003\u0002\u0002\u0002\u0283\u0281",
    "\u0003\u0002\u0002\u0002\u0283\u0284\u0003\u0002\u0002\u0002\u0284\u0286",
    "\u0003\u0002\u0002\u0002\u0285\u0283\u0003\u0002\u0002\u0002\u0286\u0287",
    "\u0007\n\u0002\u0002\u0287\u0288\u0007\u0004\u0002\u0002\u0288\u0289",
    "\u0005$\u0013\u0002\u0289\u028a\b\u001a\u0001\u0002\u028a\u0294\u0003",
    "\u0002\u0002\u0002\u028b\u028c\u00072\u0002\u0002\u028c\u028d\t\u0003",
    "\u0002\u0002\u028d\u028e\u0007\t\u0002\u0002\u028e\u028f\u0007\n\u0002",
    "\u0002\u028f\u0290\u0007\u0004\u0002\u0002\u0290\u0291\u0005$\u0013",
    "\u0002\u0291\u0292\b\u001a\u0001\u0002\u0292\u0294\u0003\u0002\u0002",
    "\u0002\u0293\u0277\u0003\u0002\u0002\u0002\u0293\u028b\u0003\u0002\u0002",
    "\u0002\u02943\u0003\u0002\u0002\u0002\u0295\u0296\u0005\f\u0007\u0002",
    "\u0296\u0297\u0007\u0005\u0002\u0002\u0297\u0298\u0005\f\u0007\u0002",
    "\u0298\u0299\b\u001b\u0001\u0002\u02995\u0003\u0002\u0002\u0002\u029a",
    "\u029b\u0005\f\u0007\u0002\u029b\u029c\u0007\u0006\u0002\u0002\u029c",
    "\u029d\u0005\f\u0007\u0002\u029d\u029e\b\u001c\u0001\u0002\u029e7\u0003",
    "\u0002\u0002\u0002\u029f\u02a0\u0007H\u0002\u0002\u02a0\u02a4\b\u001d",
    "\u0001\u0002\u02a1\u02a2\u0007I\u0002\u0002\u02a2\u02a4\b\u001d\u0001",
    "\u0002\u02a3\u029f\u0003\u0002\u0002\u0002\u02a3\u02a1\u0003\u0002\u0002",
    "\u0002\u02a49\u0003\u0002\u0002\u0002!CETbx\u0096\u00f7\u00f9\u0110",
    "\u011b\u0126\u0138\u0146\u0150\u015e\u0168\u0184\u018d\u0191\u01b8\u020d",
    "\u020f\u0218\u0239\u0248\u0254\u0261\u0275\u0283\u0293\u02a3"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ 'null', "'.'", "'='", "':'", "'..'", "','", "';'", 
                     "'('", "')'", "'['", "']'", "'{'", "'}'", 'null', 'null', 
                     "'+'", "'-'", "'*'", "'*^'", "'/'", "'%'", "'*|'", 
                     "'*|^'", "'*@'", "'*@^'", "'=='", "'!='", "'>'", "'>='", 
                     "'<'", "'<='", "'&&'", "'||'", "'!'", "'&'", "'|'", 
                     "'~'", "'^'", "'<<'", "'>>'", "'<<<'", "'@-|'", "'@<'", 
                     "'@>'", "'@|>'", "'@|<'", "'@-'", "'@|'", "'let'", 
                     "'set'", "'loopdown'", "'loopup'", "'break'", "'if'", 
                     "'else'", "'eval'", "'begin'", "'end'", "'$input'", 
                     "'$output'", "'$print'", "'M'", 'null', 'null', "'.x'", 
                     "'.y'", "'.z'" ];

var symbolicNames = [ 'null', 'null', "ASSIGN", "RANGE", "FROMTO", "COMMA", 
                      "SEMICOLON", "LPARENT", "RPARENT", "LBRACKET", "RBRACKET", 
                      "LBRACE", "RBRACE", "NEWLINE", "WS", "ADD", "SUB", 
                      "MUL", "MULGF", "DIV", "MOD", "SMMUL", "SMMULGF", 
                      "MMMUL", "MMMULGF", "EQ", "NE", "GT", "GE", "LT", 
                      "LE", "LAND", "LOR", "LNOT", "BAND", "BOR", "BNOT", 
                      "BXOR", "LS", "RS", "RLS", "MTRAN", "MSUBST", "MPERM", 
                      "MMAP", "MFOLD", "MHCON", "MVCON", "KEYWD_LET", "KEYWD_SET", 
                      "KEYWD_LOOPDOWN", "KEYWD_LOOPUP", "KEYWD_BREAK", "KEYWD_IF", 
                      "KEYWD_ELSE", "KEYWD_EVAL", "KEYWD_BEGIN", "KEYWD_END", 
                      "INPUT", "OUTPUT", "PRINT", "MATRIX_T", "SVAR_ID", 
                      "MVAR_ID", "MVAR_X", "MVAR_Y", "MVAR_Z", "FUNC_ID", 
                      "SFUNC_ID", "MFUNC_ID", "HEX_LITERAL", "DEC_LITERAL", 
                      "RADIX", "LETTER", "MLINE_COMMENTS", "SLINE_COMMENTS" ];

var ruleNames =  [ "program", "comments", "evaluation", "definition", "svar_def", 
                   "svar_expr", "mvar_def", "mvar_set", "mvar_dimension", 
                   "mvar_item_single", "var_expr", "mvar_func_ref", "svar_func_ref", 
                   "mvar_item_block", "mvar_item_list", "svar_list", "mvar_expr", 
                   "block_stmt", "stmt", "ctrl_stmt", "output_stmt", "print_stmt", 
                   "if_stmt", "loop_stmt", "func_def", "var_item_range", 
                   "var_item_fromto", "constant" ];

function CADLParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;

		this.svar_table = new Object();
		this.vvar_table = new Object();
		this.func_table = new Object();
		this.func_level = 0;
		this.line_no = 0;
		this.indent_level = 0;
		this.indent_str = "  ";
		this.line_indent = function() { return this.indent_str.times(this.indent_level); };
		this.indent = function(s) { return this.line_indent()+s; };
		this.indentN = function(s,n) { return this.indent_str.times(n)+s; };
		//this.indent = function(s) { return s.replace("@", this.line_indent()); };
		this.z_msb = 63;
		this.z_lsb = 0;
		this.y_msb = 63;
		this.y_lsb = 0;
		this.x_msb = 63;
		this.x_lsb = 0;
		this.value = 0;
		this.pfx   ="u_";
		this.pfxu   ="u_";
		this.gf = {'a': "", 'A':"", 'o': "<", 'O':"<", 'd':"(", 'D':"(", 'h':"[", 'H':"[", 'w': "{", 'W':"{"};

		this.sprintf  = require("sprintf-js").sprintf;
		this.vsprintf = require("sprintf-js").vsprintf;
		this.print = console.log;

    return this;
}

CADLParser.prototype = Object.create(antlr4.Parser.prototype);
CADLParser.prototype.constructor = CADLParser;

Object.defineProperty(CADLParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CADLParser.EOF = antlr4.Token.EOF;
CADLParser.T__0 = 1;
CADLParser.ASSIGN = 2;
CADLParser.RANGE = 3;
CADLParser.FROMTO = 4;
CADLParser.COMMA = 5;
CADLParser.SEMICOLON = 6;
CADLParser.LPARENT = 7;
CADLParser.RPARENT = 8;
CADLParser.LBRACKET = 9;
CADLParser.RBRACKET = 10;
CADLParser.LBRACE = 11;
CADLParser.RBRACE = 12;
CADLParser.NEWLINE = 13;
CADLParser.WS = 14;
CADLParser.ADD = 15;
CADLParser.SUB = 16;
CADLParser.MUL = 17;
CADLParser.MULGF = 18;
CADLParser.DIV = 19;
CADLParser.MOD = 20;
CADLParser.SMMUL = 21;
CADLParser.SMMULGF = 22;
CADLParser.MMMUL = 23;
CADLParser.MMMULGF = 24;
CADLParser.EQ = 25;
CADLParser.NE = 26;
CADLParser.GT = 27;
CADLParser.GE = 28;
CADLParser.LT = 29;
CADLParser.LE = 30;
CADLParser.LAND = 31;
CADLParser.LOR = 32;
CADLParser.LNOT = 33;
CADLParser.BAND = 34;
CADLParser.BOR = 35;
CADLParser.BNOT = 36;
CADLParser.BXOR = 37;
CADLParser.LS = 38;
CADLParser.RS = 39;
CADLParser.RLS = 40;
CADLParser.MTRAN = 41;
CADLParser.MSUBST = 42;
CADLParser.MPERM = 43;
CADLParser.MMAP = 44;
CADLParser.MFOLD = 45;
CADLParser.MHCON = 46;
CADLParser.MVCON = 47;
CADLParser.KEYWD_LET = 48;
CADLParser.KEYWD_SET = 49;
CADLParser.KEYWD_LOOPDOWN = 50;
CADLParser.KEYWD_LOOPUP = 51;
CADLParser.KEYWD_BREAK = 52;
CADLParser.KEYWD_IF = 53;
CADLParser.KEYWD_ELSE = 54;
CADLParser.KEYWD_EVAL = 55;
CADLParser.KEYWD_BEGIN = 56;
CADLParser.KEYWD_END = 57;
CADLParser.INPUT = 58;
CADLParser.OUTPUT = 59;
CADLParser.PRINT = 60;
CADLParser.MATRIX_T = 61;
CADLParser.SVAR_ID = 62;
CADLParser.MVAR_ID = 63;
CADLParser.MVAR_X = 64;
CADLParser.MVAR_Y = 65;
CADLParser.MVAR_Z = 66;
CADLParser.FUNC_ID = 67;
CADLParser.SFUNC_ID = 68;
CADLParser.MFUNC_ID = 69;
CADLParser.HEX_LITERAL = 70;
CADLParser.DEC_LITERAL = 71;
CADLParser.RADIX = 72;
CADLParser.LETTER = 73;
CADLParser.MLINE_COMMENTS = 74;
CADLParser.SLINE_COMMENTS = 75;

CADLParser.RULE_program = 0;
CADLParser.RULE_comments = 1;
CADLParser.RULE_evaluation = 2;
CADLParser.RULE_definition = 3;
CADLParser.RULE_svar_def = 4;
CADLParser.RULE_svar_expr = 5;
CADLParser.RULE_mvar_def = 6;
CADLParser.RULE_mvar_set = 7;
CADLParser.RULE_mvar_dimension = 8;
CADLParser.RULE_mvar_item_single = 9;
CADLParser.RULE_var_expr = 10;
CADLParser.RULE_mvar_func_ref = 11;
CADLParser.RULE_svar_func_ref = 12;
CADLParser.RULE_mvar_item_block = 13;
CADLParser.RULE_mvar_item_list = 14;
CADLParser.RULE_svar_list = 15;
CADLParser.RULE_mvar_expr = 16;
CADLParser.RULE_block_stmt = 17;
CADLParser.RULE_stmt = 18;
CADLParser.RULE_ctrl_stmt = 19;
CADLParser.RULE_output_stmt = 20;
CADLParser.RULE_print_stmt = 21;
CADLParser.RULE_if_stmt = 22;
CADLParser.RULE_loop_stmt = 23;
CADLParser.RULE_func_def = 24;
CADLParser.RULE_var_item_range = 25;
CADLParser.RULE_var_item_fromto = 26;
CADLParser.RULE_constant = 27;

function ProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_program;
    this._definition = null; // DefinitionContext
    this._evaluation = null; // EvaluationContext
    return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.definition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DefinitionContext);
    } else {
        return this.getTypedRuleContext(DefinitionContext,i);
    }
};

ProgramContext.prototype.comments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommentsContext);
    } else {
        return this.getTypedRuleContext(CommentsContext,i);
    }
};

ProgramContext.prototype.evaluation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EvaluationContext);
    } else {
        return this.getTypedRuleContext(EvaluationContext,i);
    }
};

ProgramContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterProgram(this);
	}
};

ProgramContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitProgram(this);
	}
};

ProgramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitProgram(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.ProgramContext = ProgramContext;

CADLParser.prototype.program = function() {

    var localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CADLParser.RULE_program);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 67;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (CADLParser.KEYWD_LET - 48)) | (1 << (CADLParser.KEYWD_SET - 48)) | (1 << (CADLParser.KEYWD_EVAL - 48)) | (1 << (CADLParser.INPUT - 48)) | (1 << (CADLParser.MLINE_COMMENTS - 48)) | (1 << (CADLParser.SLINE_COMMENTS - 48)))) !== 0)) {
            this.state = 65;
            switch(this._input.LA(1)) {
            case CADLParser.KEYWD_LET:
            case CADLParser.KEYWD_SET:
            case CADLParser.INPUT:
                this.state = 56;
                localctx._definition = this.definition();
                this.print(localctx._definition.r_codes+"\n");
                break;
            case CADLParser.MLINE_COMMENTS:
            case CADLParser.SLINE_COMMENTS:
                this.state = 59;
                this.comments();

                break;
            case CADLParser.KEYWD_EVAL:
                this.state = 62;
                localctx._evaluation = this.evaluation();
                this.print(localctx._evaluation.r_codes+"\n");
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 69;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_comments;
    return this;
}

CommentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommentsContext.prototype.constructor = CommentsContext;

CommentsContext.prototype.SLINE_COMMENTS = function() {
    return this.getToken(CADLParser.SLINE_COMMENTS, 0);
};

CommentsContext.prototype.MLINE_COMMENTS = function() {
    return this.getToken(CADLParser.MLINE_COMMENTS, 0);
};

CommentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterComments(this);
	}
};

CommentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitComments(this);
	}
};

CommentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitComments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.CommentsContext = CommentsContext;

CADLParser.prototype.comments = function() {

    var localctx = new CommentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CADLParser.RULE_comments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 70;
        _la = this._input.LA(1);
        if(!(_la===CADLParser.MLINE_COMMENTS || _la===CADLParser.SLINE_COMMENTS)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EvaluationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_evaluation;
    this.r_codes = null
    this._output_stmt = null; // Output_stmtContext
    this._print_stmt = null; // Print_stmtContext
    return this;
}

EvaluationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EvaluationContext.prototype.constructor = EvaluationContext;

EvaluationContext.prototype.KEYWD_EVAL = function() {
    return this.getToken(CADLParser.KEYWD_EVAL, 0);
};

EvaluationContext.prototype.output_stmt = function() {
    return this.getTypedRuleContext(Output_stmtContext,0);
};

EvaluationContext.prototype.SEMICOLON = function() {
    return this.getToken(CADLParser.SEMICOLON, 0);
};

EvaluationContext.prototype.print_stmt = function() {
    return this.getTypedRuleContext(Print_stmtContext,0);
};

EvaluationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterEvaluation(this);
	}
};

EvaluationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitEvaluation(this);
	}
};

EvaluationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitEvaluation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.EvaluationContext = EvaluationContext;

CADLParser.prototype.evaluation = function() {

    var localctx = new EvaluationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CADLParser.RULE_evaluation);
    try {
        this.state = 82;
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 72;
            this.match(CADLParser.KEYWD_EVAL);
            this.state = 73;
            localctx._output_stmt = this.output_stmt();
            this.state = 74;
            this.match(CADLParser.SEMICOLON);

            		var str;
                    if (this.func_level > 0) {
            		  str = this.indent(localctx._output_stmt.r_codes+";");
                    } else {
                      str = "\nlet _= " + localctx._output_stmt.r_codes + ((this.func_level > 0) ? ";" : ";;");
                    }
            		localctx.r_codes =  str
                  
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 77;
            this.match(CADLParser.KEYWD_EVAL);
            this.state = 78;
            localctx._print_stmt = this.print_stmt();
            this.state = 79;
            this.match(CADLParser.SEMICOLON);

            		var str;
                    str = "\nlet _= " + localctx._print_stmt.r_codes + ((this.func_level > 0) ? ";" : ";;");
            		localctx.r_codes =  str
                  
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_definition;
    this.r_codes = null
    this._svar_def = null; // Svar_defContext
    this._mvar_def = null; // Mvar_defContext
    this._mvar_set = null; // Mvar_setContext
    this._func_def = null; // Func_defContext
    return this;
}

DefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefinitionContext.prototype.constructor = DefinitionContext;

DefinitionContext.prototype.svar_def = function() {
    return this.getTypedRuleContext(Svar_defContext,0);
};

DefinitionContext.prototype.mvar_def = function() {
    return this.getTypedRuleContext(Mvar_defContext,0);
};

DefinitionContext.prototype.mvar_set = function() {
    return this.getTypedRuleContext(Mvar_setContext,0);
};

DefinitionContext.prototype.func_def = function() {
    return this.getTypedRuleContext(Func_defContext,0);
};

DefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterDefinition(this);
	}
};

DefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitDefinition(this);
	}
};

DefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.DefinitionContext = DefinitionContext;

CADLParser.prototype.definition = function() {

    var localctx = new DefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CADLParser.RULE_definition);
    var str = ""; var tmp = ""
    try {
        this.state = 96;
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 84;
            localctx._svar_def = this.svar_def();

            				  tmp = localctx._svar_def.r_codes;
            				  tmp = tmp.replace(/;\s*$/g, '');
            				  str = tmp+((this.func_level > 0) ? " in\n" : ";;");
            			  
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 87;
            localctx._mvar_def = this.mvar_def();

            				  tmp = localctx._mvar_def.r_codes;
            				  tmp = tmp.replace(/;\s*$/g, '');
            				  str = tmp+((this.func_level > 0) ? " in\n" : ";;");
            			  
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 90;
            localctx._mvar_set = this.mvar_set();

            				  str = localctx._mvar_set.r_codes+"\n";
            			  
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 93;
            localctx._func_def = this.func_def();

            				  tmp = localctx._func_def.r_codes;
            				  tmp = tmp.replace(/;\s*$/g, '');
            				  str= tmp+((this.func_level > 0) ? " in\n" : ";;");
            			  
            break;

        }
        localctx.r_codes =  str
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Svar_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_svar_def;
    this.r_codes = null
    this._SVAR_ID = null; // Token
    this._svar_expr = null; // Svar_exprContext
    this._block_stmt = null; // Block_stmtContext
    return this;
}

Svar_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Svar_defContext.prototype.constructor = Svar_defContext;

Svar_defContext.prototype.KEYWD_LET = function() {
    return this.getToken(CADLParser.KEYWD_LET, 0);
};

Svar_defContext.prototype.SVAR_ID = function() {
    return this.getToken(CADLParser.SVAR_ID, 0);
};

Svar_defContext.prototype.ASSIGN = function() {
    return this.getToken(CADLParser.ASSIGN, 0);
};

Svar_defContext.prototype.svar_expr = function() {
    return this.getTypedRuleContext(Svar_exprContext,0);
};

Svar_defContext.prototype.SEMICOLON = function() {
    return this.getToken(CADLParser.SEMICOLON, 0);
};

Svar_defContext.prototype.block_stmt = function() {
    return this.getTypedRuleContext(Block_stmtContext,0);
};

Svar_defContext.prototype.INPUT = function() {
    return this.getToken(CADLParser.INPUT, 0);
};

Svar_defContext.prototype.LPARENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CADLParser.LPARENT);
    } else {
        return this.getToken(CADLParser.LPARENT, i);
    }
};


Svar_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterSvar_def(this);
	}
};

Svar_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitSvar_def(this);
	}
};

Svar_defContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitSvar_def(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Svar_defContext = Svar_defContext;

CADLParser.prototype.svar_def = function() {

    var localctx = new Svar_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CADLParser.RULE_svar_def);
    try {
        this.state = 118;
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 98;
            this.match(CADLParser.KEYWD_LET);
            this.state = 99;
            localctx._SVAR_ID = this.match(CADLParser.SVAR_ID);
            this.state = 100;
            this.match(CADLParser.ASSIGN);
            this.state = 101;
            localctx._svar_expr = this.svar_expr(0);
            this.state = 102;
            this.match(CADLParser.SEMICOLON);
            localctx.r_codes =  this.indent("let "+this.pfx+(localctx._SVAR_ID===null ? null : localctx._SVAR_ID.text)+" = "+localctx._svar_expr.r_codes+"");
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 105;
            this.match(CADLParser.KEYWD_LET);
            this.state = 106;
            localctx._SVAR_ID = this.match(CADLParser.SVAR_ID);
            this.state = 107;
            this.match(CADLParser.ASSIGN);
            this.state = 108;
            localctx._block_stmt = this.block_stmt();
            this.state = 109;
            this.match(CADLParser.SEMICOLON);
            localctx.r_codes =  this.indent("let "+this.pfx+(localctx._SVAR_ID===null ? null : localctx._SVAR_ID.text)+" = "+localctx._block_stmt.r_codes+"");
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 112;
            this.match(CADLParser.INPUT);
            this.state = 113;
            this.match(CADLParser.LPARENT);
            this.state = 114;
            localctx._SVAR_ID = this.match(CADLParser.SVAR_ID);
            this.state = 115;
            this.match(CADLParser.LPARENT);
            this.state = 116;
            this.match(CADLParser.SEMICOLON);
            localctx.r_codes =  this.indent("let "+this.pfx+(localctx._SVAR_ID===null ? null : localctx._SVAR_ID.text)+' = cInputSvar "'+(localctx._SVAR_ID===null ? null : localctx._SVAR_ID.text)+'"');
            break;

        }
        localctx.r_codes =  this.indent(localctx.r_codes)
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Svar_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_svar_expr;
    this.r_codes = null
    this.fst = null; // Svar_exprContext
    this._SVAR_ID = null; // Token
    this._mvar_item_single = null; // Mvar_item_singleContext
    this._mvar_dimension = null; // Mvar_dimensionContext
    this._svar_func_ref = null; // Svar_func_refContext
    this._constant = null; // ConstantContext
    this.snd = null; // Svar_exprContext
    return this;
}

Svar_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Svar_exprContext.prototype.constructor = Svar_exprContext;

Svar_exprContext.prototype.BNOT = function() {
    return this.getToken(CADLParser.BNOT, 0);
};

Svar_exprContext.prototype.svar_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Svar_exprContext);
    } else {
        return this.getTypedRuleContext(Svar_exprContext,i);
    }
};

Svar_exprContext.prototype.LNOT = function() {
    return this.getToken(CADLParser.LNOT, 0);
};

Svar_exprContext.prototype.LPARENT = function() {
    return this.getToken(CADLParser.LPARENT, 0);
};

Svar_exprContext.prototype.RPARENT = function() {
    return this.getToken(CADLParser.RPARENT, 0);
};

Svar_exprContext.prototype.SVAR_ID = function() {
    return this.getToken(CADLParser.SVAR_ID, 0);
};

Svar_exprContext.prototype.mvar_item_single = function() {
    return this.getTypedRuleContext(Mvar_item_singleContext,0);
};

Svar_exprContext.prototype.mvar_dimension = function() {
    return this.getTypedRuleContext(Mvar_dimensionContext,0);
};

Svar_exprContext.prototype.svar_func_ref = function() {
    return this.getTypedRuleContext(Svar_func_refContext,0);
};

Svar_exprContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

Svar_exprContext.prototype.MULGF = function() {
    return this.getToken(CADLParser.MULGF, 0);
};

Svar_exprContext.prototype.MUL = function() {
    return this.getToken(CADLParser.MUL, 0);
};

Svar_exprContext.prototype.DIV = function() {
    return this.getToken(CADLParser.DIV, 0);
};

Svar_exprContext.prototype.MOD = function() {
    return this.getToken(CADLParser.MOD, 0);
};

Svar_exprContext.prototype.ADD = function() {
    return this.getToken(CADLParser.ADD, 0);
};

Svar_exprContext.prototype.SUB = function() {
    return this.getToken(CADLParser.SUB, 0);
};

Svar_exprContext.prototype.EQ = function() {
    return this.getToken(CADLParser.EQ, 0);
};

Svar_exprContext.prototype.NE = function() {
    return this.getToken(CADLParser.NE, 0);
};

Svar_exprContext.prototype.LT = function() {
    return this.getToken(CADLParser.LT, 0);
};

Svar_exprContext.prototype.LE = function() {
    return this.getToken(CADLParser.LE, 0);
};

Svar_exprContext.prototype.GE = function() {
    return this.getToken(CADLParser.GE, 0);
};

Svar_exprContext.prototype.GT = function() {
    return this.getToken(CADLParser.GT, 0);
};

Svar_exprContext.prototype.LS = function() {
    return this.getToken(CADLParser.LS, 0);
};

Svar_exprContext.prototype.RS = function() {
    return this.getToken(CADLParser.RS, 0);
};

Svar_exprContext.prototype.BAND = function() {
    return this.getToken(CADLParser.BAND, 0);
};

Svar_exprContext.prototype.BOR = function() {
    return this.getToken(CADLParser.BOR, 0);
};

Svar_exprContext.prototype.BXOR = function() {
    return this.getToken(CADLParser.BXOR, 0);
};

Svar_exprContext.prototype.LAND = function() {
    return this.getToken(CADLParser.LAND, 0);
};

Svar_exprContext.prototype.LOR = function() {
    return this.getToken(CADLParser.LOR, 0);
};

Svar_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterSvar_expr(this);
	}
};

Svar_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitSvar_expr(this);
	}
};

Svar_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitSvar_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CADLParser.prototype.svar_expr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Svar_exprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 10;
    this.enterRecursionRule(localctx, 10, CADLParser.RULE_svar_expr, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 148;
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.state = 121;
            this.match(CADLParser.BNOT);
            this.state = 122;
            localctx.fst = this.svar_expr(10);
            localctx.r_codes =  "~"+localctx.fst.r_codes
            break;

        case 2:
            this.state = 125;
            this.match(CADLParser.LNOT);
            this.state = 126;
            localctx.fst = this.svar_expr(7);
            localctx.r_codes =  "(not "+localctx.fst.r_codes+")"
            break;

        case 3:
            this.state = 129;
            this.match(CADLParser.LPARENT);
            this.state = 130;
            localctx.fst = this.svar_expr(0);
            this.state = 131;
            this.match(CADLParser.RPARENT);
            localctx.r_codes =  "("+localctx.fst.r_codes+")"
            break;

        case 4:
            this.state = 134;
            localctx._SVAR_ID = this.match(CADLParser.SVAR_ID);
            localctx.r_codes =  this.pfx+(localctx._SVAR_ID===null ? null : localctx._SVAR_ID.text)
            break;

        case 5:
            this.state = 136;
            localctx._mvar_item_single = this.mvar_item_single();
            localctx.r_codes =  localctx._mvar_item_single.r_codes
            break;

        case 6:
            this.state = 139;
            localctx._mvar_dimension = this.mvar_dimension();
            localctx.r_codes =  localctx._mvar_dimension.r_codes
            break;

        case 7:
            this.state = 142;
            localctx._svar_func_ref = this.svar_func_ref();
            localctx.r_codes =  localctx._svar_func_ref.r_codes
            break;

        case 8:
            this.state = 145;
            localctx._constant = this.constant();
            localctx.r_codes =  localctx._constant.r_codes
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 247;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 245;
                var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 150;
                    if (!( this.precpred(this._ctx, 27))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                    }
                    this.state = 151;
                    this.match(CADLParser.MULGF);
                    this.state = 152;
                    localctx.snd = this.svar_expr(28);
                    localctx.r_codes =  localctx.fst.r_codes+" *^"+this.gf['o']+" "+localctx.snd.r_codes
                    break;

                case 2:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 155;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 156;
                    this.match(CADLParser.MUL);
                    this.state = 157;
                    localctx.snd = this.svar_expr(27);
                    localctx.r_codes =  localctx.fst.r_codes+" * "+localctx.snd.r_codes
                    break;

                case 3:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 160;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 161;
                    this.match(CADLParser.DIV);
                    this.state = 162;
                    localctx.snd = this.svar_expr(26);
                    localctx.r_codes =  localctx.fst.r_codes+" / "+localctx.snd.r_codes
                    break;

                case 4:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 165;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 166;
                    this.match(CADLParser.MOD);
                    this.state = 167;
                    localctx.snd = this.svar_expr(25);
                    localctx.r_codes =  localctx.fst.r_codes+" mod "+localctx.snd.r_codes
                    break;

                case 5:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 170;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 171;
                    this.match(CADLParser.ADD);
                    this.state = 172;
                    localctx.snd = this.svar_expr(24);
                    localctx.r_codes =  localctx.fst.r_codes+" + "+localctx.snd.r_codes
                    break;

                case 6:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 175;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 176;
                    this.match(CADLParser.SUB);
                    this.state = 177;
                    localctx.snd = this.svar_expr(23);
                    localctx.r_codes =  localctx.fst.r_codes+" - "+localctx.snd.r_codes
                    break;

                case 7:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 180;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 181;
                    this.match(CADLParser.EQ);
                    this.state = 182;
                    localctx.snd = this.svar_expr(22);
                    localctx.r_codes =  localctx.fst.r_codes+" == "+localctx.snd.r_codes
                    break;

                case 8:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 185;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 186;
                    this.match(CADLParser.NE);
                    this.state = 187;
                    localctx.snd = this.svar_expr(21);
                    localctx.r_codes =  localctx.fst.r_codes+" != "+localctx.snd.r_codes
                    break;

                case 9:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 190;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 191;
                    this.match(CADLParser.LT);
                    this.state = 192;
                    localctx.snd = this.svar_expr(20);
                    localctx.r_codes =  localctx.fst.r_codes+" < "+localctx.snd.r_codes
                    break;

                case 10:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 195;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 196;
                    this.match(CADLParser.LE);
                    this.state = 197;
                    localctx.snd = this.svar_expr(19);
                    localctx.r_codes =  localctx.fst.r_codes+" <= "+localctx.snd.r_codes
                    break;

                case 11:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 200;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 201;
                    this.match(CADLParser.GE);
                    this.state = 202;
                    localctx.snd = this.svar_expr(18);
                    localctx.r_codes =  localctx.fst.r_codes+" >= "+localctx.snd.r_codes
                    break;

                case 12:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 205;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 206;
                    this.match(CADLParser.GT);
                    this.state = 207;
                    localctx.snd = this.svar_expr(17);
                    localctx.r_codes =  localctx.fst.r_codes+" > "+localctx.snd.r_codes
                    break;

                case 13:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 210;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 211;
                    this.match(CADLParser.LS);
                    this.state = 212;
                    localctx.snd = this.svar_expr(16);
                    localctx.r_codes =  localctx.fst.r_codes+" lsl "+localctx.snd.r_codes
                    break;

                case 14:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 215;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 216;
                    this.match(CADLParser.RS);
                    this.state = 217;
                    localctx.snd = this.svar_expr(15);
                    localctx.r_codes =  localctx.fst.r_codes+" lsr "+localctx.snd.r_codes
                    break;

                case 15:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 220;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 221;
                    this.match(CADLParser.BAND);
                    this.state = 222;
                    localctx.snd = this.svar_expr(14);
                    localctx.r_codes =  localctx.fst.r_codes+" land "+localctx.snd.r_codes
                    break;

                case 16:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 225;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 226;
                    this.match(CADLParser.BOR);
                    this.state = 227;
                    localctx.snd = this.svar_expr(13);
                    localctx.r_codes =  localctx.fst.r_codes+" lor "+localctx.snd.r_codes
                    break;

                case 17:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 230;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 231;
                    this.match(CADLParser.BXOR);
                    this.state = 232;
                    localctx.snd = this.svar_expr(12);
                    localctx.r_codes =  localctx.fst.r_codes+" lxor "+localctx.snd.r_codes
                    break;

                case 18:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 235;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 236;
                    this.match(CADLParser.LAND);
                    this.state = 237;
                    localctx.snd = this.svar_expr(10);
                    localctx.r_codes =  localctx.fst.r_codes+" && "+localctx.snd.r_codes
                    break;

                case 19:
                    localctx = new Svar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_svar_expr);
                    this.state = 240;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 241;
                    this.match(CADLParser.LOR);
                    this.state = 242;
                    localctx.snd = this.svar_expr(9);
                    localctx.r_codes =  localctx.fst.r_codes+" || "+localctx.snd.r_codes
                    break;

                } 
            }
            this.state = 249;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Mvar_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_mvar_def;
    this.r_codes = null
    this._MVAR_ID = null; // Token
    this._mvar_expr = null; // Mvar_exprContext
    this._block_stmt = null; // Block_stmtContext
    return this;
}

Mvar_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mvar_defContext.prototype.constructor = Mvar_defContext;

Mvar_defContext.prototype.KEYWD_LET = function() {
    return this.getToken(CADLParser.KEYWD_LET, 0);
};

Mvar_defContext.prototype.MVAR_ID = function() {
    return this.getToken(CADLParser.MVAR_ID, 0);
};

Mvar_defContext.prototype.ASSIGN = function() {
    return this.getToken(CADLParser.ASSIGN, 0);
};

Mvar_defContext.prototype.mvar_expr = function() {
    return this.getTypedRuleContext(Mvar_exprContext,0);
};

Mvar_defContext.prototype.SEMICOLON = function() {
    return this.getToken(CADLParser.SEMICOLON, 0);
};

Mvar_defContext.prototype.block_stmt = function() {
    return this.getTypedRuleContext(Block_stmtContext,0);
};

Mvar_defContext.prototype.INPUT = function() {
    return this.getToken(CADLParser.INPUT, 0);
};

Mvar_defContext.prototype.LPARENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CADLParser.LPARENT);
    } else {
        return this.getToken(CADLParser.LPARENT, i);
    }
};


Mvar_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterMvar_def(this);
	}
};

Mvar_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitMvar_def(this);
	}
};

Mvar_defContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitMvar_def(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Mvar_defContext = Mvar_defContext;

CADLParser.prototype.mvar_def = function() {

    var localctx = new Mvar_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CADLParser.RULE_mvar_def);
    try {
        this.state = 270;
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 250;
            this.match(CADLParser.KEYWD_LET);
            this.state = 251;
            localctx._MVAR_ID = this.match(CADLParser.MVAR_ID);
            this.state = 252;
            this.match(CADLParser.ASSIGN);
            this.state = 253;
            localctx._mvar_expr = this.mvar_expr(0);
            this.state = 254;
            this.match(CADLParser.SEMICOLON);
            localctx.r_codes =  "let "+this.pfx+(localctx._MVAR_ID===null ? null : localctx._MVAR_ID.text)+" = "+localctx._mvar_expr.r_codes+"";
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 257;
            this.match(CADLParser.KEYWD_LET);
            this.state = 258;
            localctx._MVAR_ID = this.match(CADLParser.MVAR_ID);
            this.state = 259;
            this.match(CADLParser.ASSIGN);
            this.state = 260;
            localctx._block_stmt = this.block_stmt();
            this.state = 261;
            this.match(CADLParser.SEMICOLON);
            localctx.r_codes =  "let "+this.pfx+(localctx._MVAR_ID===null ? null : localctx._MVAR_ID.text)+" = "+localctx._block_stmt.r_codes+"";
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 264;
            this.match(CADLParser.INPUT);
            this.state = 265;
            this.match(CADLParser.LPARENT);
            this.state = 266;
            localctx._MVAR_ID = this.match(CADLParser.MVAR_ID);
            this.state = 267;
            this.match(CADLParser.LPARENT);
            this.state = 268;
            this.match(CADLParser.SEMICOLON);
            localctx.r_codes =  "let "+this.pfx+(localctx._MVAR_ID===null ? null : localctx._MVAR_ID.text)+' = cInputMvar "'+(localctx._MVAR_ID===null ? null : localctx._MVAR_ID.text)+'"';
            break;

        }
        localctx.r_codes =  this.indent(localctx.r_codes)
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mvar_setContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_mvar_set;
    this.r_codes = null
    this.m = null; // Mvar_item_singleContext
    this._svar_expr = null; // Svar_exprContext
    return this;
}

Mvar_setContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mvar_setContext.prototype.constructor = Mvar_setContext;

Mvar_setContext.prototype.KEYWD_SET = function() {
    return this.getToken(CADLParser.KEYWD_SET, 0);
};

Mvar_setContext.prototype.ASSIGN = function() {
    return this.getToken(CADLParser.ASSIGN, 0);
};

Mvar_setContext.prototype.svar_expr = function() {
    return this.getTypedRuleContext(Svar_exprContext,0);
};

Mvar_setContext.prototype.mvar_item_single = function() {
    return this.getTypedRuleContext(Mvar_item_singleContext,0);
};

Mvar_setContext.prototype.SEMICOLON = function() {
    return this.getToken(CADLParser.SEMICOLON, 0);
};

Mvar_setContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterMvar_set(this);
	}
};

Mvar_setContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitMvar_set(this);
	}
};

Mvar_setContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitMvar_set(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Mvar_setContext = Mvar_setContext;

CADLParser.prototype.mvar_set = function() {

    var localctx = new Mvar_setContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CADLParser.RULE_mvar_set);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 272;
        this.match(CADLParser.KEYWD_SET);
        this.state = 273;
        localctx.m = this.mvar_item_single();
        localctx.r_codes =  this.pfx+localctx.m.name+".("+localctx.m.x_msb+").("+localctx.m.y_msb+")"
        this.state = 275;
        this.match(CADLParser.ASSIGN);
        localctx.r_codes += " <- ";
        this.state = 277;
        localctx._svar_expr = this.svar_expr(0);
        localctx.r_codes += localctx._svar_expr.r_codes;
        this.state = 281;
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        if(la_===1) {
            this.state = 279;
            this.match(CADLParser.SEMICOLON);
            localctx.r_codes += ";";

        }
        localctx.r_codes =  this.indent(localctx.r_codes)
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mvar_dimensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_mvar_dimension;
    this.r_codes = null
    this._MVAR_ID = null; // Token
    return this;
}

Mvar_dimensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mvar_dimensionContext.prototype.constructor = Mvar_dimensionContext;

Mvar_dimensionContext.prototype.MVAR_ID = function() {
    return this.getToken(CADLParser.MVAR_ID, 0);
};

Mvar_dimensionContext.prototype.MVAR_X = function() {
    return this.getToken(CADLParser.MVAR_X, 0);
};

Mvar_dimensionContext.prototype.MVAR_Y = function() {
    return this.getToken(CADLParser.MVAR_Y, 0);
};

Mvar_dimensionContext.prototype.MVAR_Z = function() {
    return this.getToken(CADLParser.MVAR_Z, 0);
};

Mvar_dimensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterMvar_dimension(this);
	}
};

Mvar_dimensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitMvar_dimension(this);
	}
};

Mvar_dimensionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitMvar_dimension(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Mvar_dimensionContext = Mvar_dimensionContext;

CADLParser.prototype.mvar_dimension = function() {

    var localctx = new Mvar_dimensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CADLParser.RULE_mvar_dimension);
    try {
        this.state = 292;
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 283;
            localctx._MVAR_ID = this.match(CADLParser.MVAR_ID);
            this.state = 284;
            this.match(CADLParser.MVAR_X);
             localctx.r_codes =  "(cX "+this.pfx+(localctx._MVAR_ID===null ? null : localctx._MVAR_ID.text)+")" 
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 286;
            localctx._MVAR_ID = this.match(CADLParser.MVAR_ID);
            this.state = 287;
            this.match(CADLParser.MVAR_Y);
             localctx.r_codes =  "(cY "+this.pfx+(localctx._MVAR_ID===null ? null : localctx._MVAR_ID.text)+")" 
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 289;
            localctx._MVAR_ID = this.match(CADLParser.MVAR_ID);
            this.state = 290;
            this.match(CADLParser.MVAR_Z);
             localctx.r_codes =  "(cZ "+this.pfx+(localctx._MVAR_ID===null ? null : localctx._MVAR_ID.text)+")" 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mvar_item_singleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_mvar_item_single;
    this.r_codes = null
    this.name = null
    this.x_msb = null
    this.x_lsb = null
    this.y_msb = null
    this.y_lsb = null
    this.z_msb = null
    this.z_lsb = null
    this._MVAR_ID = null; // Token
    this.x = null; // Svar_exprContext
    this.y = null; // Svar_exprContext
    this.z = null; // Var_item_rangeContext
    return this;
}

Mvar_item_singleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mvar_item_singleContext.prototype.constructor = Mvar_item_singleContext;

Mvar_item_singleContext.prototype.MVAR_ID = function() {
    return this.getToken(CADLParser.MVAR_ID, 0);
};

Mvar_item_singleContext.prototype.LBRACKET = function() {
    return this.getToken(CADLParser.LBRACKET, 0);
};

Mvar_item_singleContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CADLParser.COMMA);
    } else {
        return this.getToken(CADLParser.COMMA, i);
    }
};


Mvar_item_singleContext.prototype.RBRACKET = function() {
    return this.getToken(CADLParser.RBRACKET, 0);
};

Mvar_item_singleContext.prototype.svar_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Svar_exprContext);
    } else {
        return this.getTypedRuleContext(Svar_exprContext,i);
    }
};

Mvar_item_singleContext.prototype.var_item_range = function() {
    return this.getTypedRuleContext(Var_item_rangeContext,0);
};

Mvar_item_singleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterMvar_item_single(this);
	}
};

Mvar_item_singleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitMvar_item_single(this);
	}
};

Mvar_item_singleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitMvar_item_single(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Mvar_item_singleContext = Mvar_item_singleContext;

CADLParser.prototype.mvar_item_single = function() {

    var localctx = new Mvar_item_singleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CADLParser.RULE_mvar_item_single);
    localctx.r_codes =  ""
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 294;
        localctx._MVAR_ID = this.match(CADLParser.MVAR_ID);
        this.state = 295;
        this.match(CADLParser.LBRACKET);
        this.state = 296;
        localctx.x = this.svar_expr(0);
        this.state = 297;
        this.match(CADLParser.COMMA);
        this.state = 298;
        localctx.y = this.svar_expr(0);
        this.state = 299;
        this.match(CADLParser.COMMA);
        this.state = 300;
        localctx.z = this.var_item_range();
        this.state = 301;
        this.match(CADLParser.RBRACKET);

                localctx.name =  (localctx._MVAR_ID===null ? null : localctx._MVAR_ID.text)
                localctx.x_msb =  localctx.x.r_codes
                localctx.x_lsb =  localctx.x_msb
                localctx.y_msb =  localctx.y.r_codes
                localctx.y_lsb =  localctx.y_msb
                localctx.z_msb =  localctx.z.msb
                localctx.z_lsb =  localctx.z.lsb
                localctx.r_codes =  "(cMatrixSingle "+this.pfx+localctx.name+" ("+localctx.x_msb+", "+localctx.y_msb+", "+localctx.z_msb+", "+localctx.z_lsb+"))"
              
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Var_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_var_expr;
    this.r_codes = null
    this._svar_expr = null; // Svar_exprContext
    this._mvar_expr = null; // Mvar_exprContext
    return this;
}

Var_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Var_exprContext.prototype.constructor = Var_exprContext;

Var_exprContext.prototype.svar_expr = function() {
    return this.getTypedRuleContext(Svar_exprContext,0);
};

Var_exprContext.prototype.mvar_expr = function() {
    return this.getTypedRuleContext(Mvar_exprContext,0);
};

Var_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterVar_expr(this);
	}
};

Var_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitVar_expr(this);
	}
};

Var_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitVar_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Var_exprContext = Var_exprContext;

CADLParser.prototype.var_expr = function() {

    var localctx = new Var_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CADLParser.RULE_var_expr);
    try {
        this.state = 310;
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 304;
            localctx._svar_expr = this.svar_expr(0);
            localctx.r_codes =  localctx._svar_expr.r_codes
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 307;
            localctx._mvar_expr = this.mvar_expr(0);
            localctx.r_codes =  localctx._mvar_expr.r_codes
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mvar_func_refContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_mvar_func_ref;
    this.r_codes = null
    this.name = null; // Token
    this.arg0 = null; // Var_exprContext
    this.arg = null; // Var_exprContext
    return this;
}

Mvar_func_refContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mvar_func_refContext.prototype.constructor = Mvar_func_refContext;

Mvar_func_refContext.prototype.LPARENT = function() {
    return this.getToken(CADLParser.LPARENT, 0);
};

Mvar_func_refContext.prototype.RPARENT = function() {
    return this.getToken(CADLParser.RPARENT, 0);
};

Mvar_func_refContext.prototype.MFUNC_ID = function() {
    return this.getToken(CADLParser.MFUNC_ID, 0);
};

Mvar_func_refContext.prototype.var_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Var_exprContext);
    } else {
        return this.getTypedRuleContext(Var_exprContext,i);
    }
};

Mvar_func_refContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CADLParser.COMMA);
    } else {
        return this.getToken(CADLParser.COMMA, i);
    }
};


Mvar_func_refContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterMvar_func_ref(this);
	}
};

Mvar_func_refContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitMvar_func_ref(this);
	}
};

Mvar_func_refContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitMvar_func_ref(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Mvar_func_refContext = Mvar_func_refContext;

CADLParser.prototype.mvar_func_ref = function() {

    var localctx = new Mvar_func_refContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CADLParser.RULE_mvar_func_ref);
    var _la = 0; // Token type
    try {
        this.state = 334;
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 312;
            localctx.name = this.match(CADLParser.MFUNC_ID);
            localctx.r_codes =  "("+this.pfxu+(localctx.name===null ? null : localctx.name.text)
            this.state = 314;
            this.match(CADLParser.LPARENT);
            localctx.r_codes += " ";
            this.state = 316;
            localctx.arg0 = this.var_expr();
            localctx.r_codes += "("+localctx.arg0.r_codes+")";
            this.state = 324;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CADLParser.COMMA) {
                this.state = 318;
                this.match(CADLParser.COMMA);
                this.state = 319;
                localctx.arg = this.var_expr();
                localctx.r_codes += " ("+localctx.arg.r_codes+")";
                this.state = 326;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 327;
            this.match(CADLParser.RPARENT);
            localctx.r_codes += ")";
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 330;
            localctx.name = this.match(CADLParser.MFUNC_ID);
            this.state = 331;
            this.match(CADLParser.LPARENT);
            this.state = 332;
            this.match(CADLParser.RPARENT);
            localctx.r_codes =  "("+this.pfx+(localctx.name===null ? null : localctx.name.text)+" ())"
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Svar_func_refContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_svar_func_ref;
    this.r_codes = null
    this.name = null; // Token
    this.arg0 = null; // Var_exprContext
    this.arg = null; // Var_exprContext
    return this;
}

Svar_func_refContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Svar_func_refContext.prototype.constructor = Svar_func_refContext;

Svar_func_refContext.prototype.LPARENT = function() {
    return this.getToken(CADLParser.LPARENT, 0);
};

Svar_func_refContext.prototype.RPARENT = function() {
    return this.getToken(CADLParser.RPARENT, 0);
};

Svar_func_refContext.prototype.SFUNC_ID = function() {
    return this.getToken(CADLParser.SFUNC_ID, 0);
};

Svar_func_refContext.prototype.var_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Var_exprContext);
    } else {
        return this.getTypedRuleContext(Var_exprContext,i);
    }
};

Svar_func_refContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CADLParser.COMMA);
    } else {
        return this.getToken(CADLParser.COMMA, i);
    }
};


Svar_func_refContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterSvar_func_ref(this);
	}
};

Svar_func_refContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitSvar_func_ref(this);
	}
};

Svar_func_refContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitSvar_func_ref(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Svar_func_refContext = Svar_func_refContext;

CADLParser.prototype.svar_func_ref = function() {

    var localctx = new Svar_func_refContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CADLParser.RULE_svar_func_ref);
    var _la = 0; // Token type
    try {
        this.state = 358;
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 336;
            localctx.name = this.match(CADLParser.SFUNC_ID);
            localctx.r_codes =  "("+this.pfxu+(localctx.name===null ? null : localctx.name.text)
            this.state = 338;
            this.match(CADLParser.LPARENT);
            localctx.r_codes += " ";
            this.state = 340;
            localctx.arg0 = this.var_expr();
            localctx.r_codes += "("+localctx.arg0.r_codes+")";
            this.state = 348;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CADLParser.COMMA) {
                this.state = 342;
                this.match(CADLParser.COMMA);
                this.state = 343;
                localctx.arg = this.var_expr();
                localctx.r_codes += " ("+localctx.arg.r_codes+")";
                this.state = 350;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 351;
            this.match(CADLParser.RPARENT);
            localctx.r_codes += ")";
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 354;
            localctx.name = this.match(CADLParser.SFUNC_ID);
            this.state = 355;
            this.match(CADLParser.LPARENT);
            this.state = 356;
            this.match(CADLParser.RPARENT);
            localctx.r_codes =  "("+this.pfx+(localctx.name===null ? null : localctx.name.text)+" ())"
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mvar_item_blockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_mvar_item_block;
    this.r_codes = null
    this.name = null
    this.x_msb = null
    this.x_lsb = null
    this.y_msb = null
    this.y_lsb = null
    this.z_msb = null
    this.z_lsb = null
    this._MVAR_ID = null; // Token
    this.x = null; // Var_item_rangeContext
    this.y = null; // Var_item_rangeContext
    this.z = null; // Var_item_rangeContext
    return this;
}

Mvar_item_blockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mvar_item_blockContext.prototype.constructor = Mvar_item_blockContext;

Mvar_item_blockContext.prototype.MVAR_ID = function() {
    return this.getToken(CADLParser.MVAR_ID, 0);
};

Mvar_item_blockContext.prototype.LBRACKET = function() {
    return this.getToken(CADLParser.LBRACKET, 0);
};

Mvar_item_blockContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CADLParser.COMMA);
    } else {
        return this.getToken(CADLParser.COMMA, i);
    }
};


Mvar_item_blockContext.prototype.RBRACKET = function() {
    return this.getToken(CADLParser.RBRACKET, 0);
};

Mvar_item_blockContext.prototype.var_item_range = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Var_item_rangeContext);
    } else {
        return this.getTypedRuleContext(Var_item_rangeContext,i);
    }
};

Mvar_item_blockContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterMvar_item_block(this);
	}
};

Mvar_item_blockContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitMvar_item_block(this);
	}
};

Mvar_item_blockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitMvar_item_block(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Mvar_item_blockContext = Mvar_item_blockContext;

CADLParser.prototype.mvar_item_block = function() {

    var localctx = new Mvar_item_blockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CADLParser.RULE_mvar_item_block);
    localctx.r_codes =  ""
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 360;
        localctx._MVAR_ID = this.match(CADLParser.MVAR_ID);
        this.state = 361;
        this.match(CADLParser.LBRACKET);
        this.state = 362;
        localctx.x = this.var_item_range();
        this.state = 363;
        this.match(CADLParser.COMMA);
        this.state = 364;
        localctx.y = this.var_item_range();
        this.state = 365;
        this.match(CADLParser.COMMA);
        this.state = 366;
        localctx.z = this.var_item_range();
        this.state = 367;
        this.match(CADLParser.RBRACKET);

                localctx.name =  (localctx._MVAR_ID===null ? null : localctx._MVAR_ID.text)
                localctx.x_msb =  localctx.x.msb
                localctx.x_lsb =  localctx.x.lsb
                localctx.y_msb =  localctx.y.msb
                localctx.y_lsb =  localctx.y.lsb
                localctx.z_msb =  localctx.z.msb
                localctx.z_lsb =  localctx.z.lsb
                localctx.r_codes =  "(cMatrixBlock "+this.pfx+localctx.name+" ("+localctx.x_msb+", "+localctx.x_lsb+", "+localctx.y_msb+", "+localctx.y_lsb+", "+localctx.z_msb+", "+localctx.z_lsb+"))"
              
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mvar_item_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_mvar_item_list;
    this.r_codes = null
    this.name = null
    this.x_msb = null
    this.x_lsb = null
    this.y_msb = null
    this.y_lsb = null
    this.z_msb = null
    this.z_lsb = null
    this._MVAR_ID = null; // Token
    this.x = null; // Var_item_fromtoContext
    this.y = null; // Var_item_fromtoContext
    this.z = null; // Var_item_rangeContext
    return this;
}

Mvar_item_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mvar_item_listContext.prototype.constructor = Mvar_item_listContext;

Mvar_item_listContext.prototype.MVAR_ID = function() {
    return this.getToken(CADLParser.MVAR_ID, 0);
};

Mvar_item_listContext.prototype.LBRACKET = function() {
    return this.getToken(CADLParser.LBRACKET, 0);
};

Mvar_item_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CADLParser.COMMA);
    } else {
        return this.getToken(CADLParser.COMMA, i);
    }
};


Mvar_item_listContext.prototype.RBRACKET = function() {
    return this.getToken(CADLParser.RBRACKET, 0);
};

Mvar_item_listContext.prototype.var_item_fromto = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Var_item_fromtoContext);
    } else {
        return this.getTypedRuleContext(Var_item_fromtoContext,i);
    }
};

Mvar_item_listContext.prototype.var_item_range = function() {
    return this.getTypedRuleContext(Var_item_rangeContext,0);
};

Mvar_item_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterMvar_item_list(this);
	}
};

Mvar_item_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitMvar_item_list(this);
	}
};

Mvar_item_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitMvar_item_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Mvar_item_listContext = Mvar_item_listContext;

CADLParser.prototype.mvar_item_list = function() {

    var localctx = new Mvar_item_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CADLParser.RULE_mvar_item_list);
    localctx.r_codes =  ""
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 370;
        localctx._MVAR_ID = this.match(CADLParser.MVAR_ID);
        this.state = 371;
        this.match(CADLParser.LBRACKET);
        this.state = 372;
        localctx.x = this.var_item_fromto();
        this.state = 373;
        this.match(CADLParser.COMMA);
        this.state = 374;
        localctx.y = this.var_item_fromto();
        this.state = 375;
        this.match(CADLParser.COMMA);
        this.state = 376;
        localctx.z = this.var_item_range();
        this.state = 377;
        this.match(CADLParser.RBRACKET);

                    localctx.name =  (localctx._MVAR_ID===null ? null : localctx._MVAR_ID.text)
                    localctx.x_msb =  localctx.x.msb
                    localctx.x_lsb =  localctx.x.lsb
                    localctx.y_msb =  localctx.y.msb
                    localctx.y_lsb =  localctx.y.lsb
                    localctx.z_msb =  localctx.z.msb
                    localctx.z_lsb =  localctx.z.lsb
                  

                      var i, j;
                      if (localctx.x_msb > localctx.x_lsb) {
                        for (i=localctx.x_msb; i>=localctx.x_lsb; i--) {
                          if (localctx.y_msb > localctx.y_lsb) {
                            for (j=localctx.y_msb; j>=localctx.y_lsb; j--) {
                              localctx.r_codes += this.pfx+localctx.name+".("+i+").("+j+"); ";
                            }
                          } else {
                            for (j=localctx.y_msb; j<=localctx.y_lsb; j++) {
                              localctx.r_codes += this.pfx+localctx.name+".("+i+").("+j+"); ";
                            }
                          }
                        }
                      } else {
        				for (i=localctx.x_lsb; i<=localctx.x_lsb; i++) {
                          if (localctx.y_msb > localctx.y_lsb) {
                            for (j=localctx.y_msb; j>=localctx.y_lsb; j--) {
                              localctx.r_codes += this.pfx+localctx.name+".("+i+").("+j+"); ";
                            }
                          } else {
                            for (j=localctx.y_msb; j<=localctx.y_lsb; j++) {
                              localctx.r_codes += this.pfx+localctx.name+".("+i+").("+j+"); ";
                            }
                          }
                        }
        			  }
        			  var str  = localctx.r_codes.replace(/;\s*$/g, '');
        			  localctx.r_codes =  str
                    
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Svar_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_svar_list;
    this.r_codes = null
    this.name = null
    this.var_x_lsb = null
    this.y_msb = null
    this.y_lsb = null
    this.z_msb = null
    this.z_lsb = null
    this.s = null; // Svar_exprContext
    this._svar_expr = null; // Svar_exprContext
    this.l = null; // Mvar_item_listContext
    return this;
}

Svar_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Svar_listContext.prototype.constructor = Svar_listContext;

Svar_listContext.prototype.svar_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Svar_exprContext);
    } else {
        return this.getTypedRuleContext(Svar_exprContext,i);
    }
};

Svar_listContext.prototype.mvar_item_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Mvar_item_listContext);
    } else {
        return this.getTypedRuleContext(Mvar_item_listContext,i);
    }
};

Svar_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CADLParser.COMMA);
    } else {
        return this.getToken(CADLParser.COMMA, i);
    }
};


Svar_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterSvar_list(this);
	}
};

Svar_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitSvar_list(this);
	}
};

Svar_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitSvar_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Svar_listContext = Svar_listContext;

CADLParser.prototype.svar_list = function() {

    var localctx = new Svar_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CADLParser.RULE_svar_list);
    localctx.r_codes =  "[|" 
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 386;
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.state = 380;
            localctx.s = localctx._svar_expr = this.svar_expr(0);
            localctx.r_codes += localctx._svar_expr.r_codes+"; ";
            break;

        case 2:
            this.state = 383;
            localctx.l = this.mvar_item_list();
            localctx.r_codes += localctx.l.r_codes+"; ";
            break;

        }
        this.state = 399;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CADLParser.COMMA) {
            this.state = 388;
            this.match(CADLParser.COMMA);
            this.state = 395;
            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
            switch(la_) {
            case 1:
                this.state = 389;
                localctx.s = localctx._svar_expr = this.svar_expr(0);
                localctx.r_codes += localctx._svar_expr.r_codes+"; ";
                break;

            case 2:
                this.state = 392;
                localctx.l = this.mvar_item_list();
                localctx.r_codes += localctx.l.r_codes+"; ";
                break;

            }
            this.state = 401;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }

                  var str = localctx.r_codes.replace(/;\s*$/g, '');
                  localctx.r_codes =  str+"|]"
                
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mvar_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_mvar_expr;
    this.r_codes = null
    this.name = null
    this.x_msb = null
    this.x_lsb = null
    this.y_msb = null
    this.y_lsb = null
    this.z_msb = null
    this.z_lsb = null
    this.fst = null; // Mvar_exprContext
    this.n = null; // Token
    this._mvar_func_ref = null; // Mvar_func_refContext
    this._mvar_item_block = null; // Mvar_item_blockContext
    this.dx = null; // Svar_exprContext
    this.dy = null; // Svar_exprContext
    this.dz = null; // Svar_exprContext
    this.v = null; // Svar_listContext
    this.snd = null; // Mvar_exprContext
    this.fn = null; // Token
    return this;
}

Mvar_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mvar_exprContext.prototype.constructor = Mvar_exprContext;

Mvar_exprContext.prototype.BNOT = function() {
    return this.getToken(CADLParser.BNOT, 0);
};

Mvar_exprContext.prototype.mvar_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Mvar_exprContext);
    } else {
        return this.getTypedRuleContext(Mvar_exprContext,i);
    }
};

Mvar_exprContext.prototype.MTRAN = function() {
    return this.getToken(CADLParser.MTRAN, 0);
};

Mvar_exprContext.prototype.LPARENT = function() {
    return this.getToken(CADLParser.LPARENT, 0);
};

Mvar_exprContext.prototype.RPARENT = function() {
    return this.getToken(CADLParser.RPARENT, 0);
};

Mvar_exprContext.prototype.MVAR_ID = function() {
    return this.getToken(CADLParser.MVAR_ID, 0);
};

Mvar_exprContext.prototype.mvar_func_ref = function() {
    return this.getTypedRuleContext(Mvar_func_refContext,0);
};

Mvar_exprContext.prototype.mvar_item_block = function() {
    return this.getTypedRuleContext(Mvar_item_blockContext,0);
};

Mvar_exprContext.prototype.MATRIX_T = function() {
    return this.getToken(CADLParser.MATRIX_T, 0);
};

Mvar_exprContext.prototype.LBRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CADLParser.LBRACKET);
    } else {
        return this.getToken(CADLParser.LBRACKET, i);
    }
};


Mvar_exprContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CADLParser.COMMA);
    } else {
        return this.getToken(CADLParser.COMMA, i);
    }
};


Mvar_exprContext.prototype.RBRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CADLParser.RBRACKET);
    } else {
        return this.getToken(CADLParser.RBRACKET, i);
    }
};


Mvar_exprContext.prototype.svar_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Svar_exprContext);
    } else {
        return this.getTypedRuleContext(Svar_exprContext,i);
    }
};

Mvar_exprContext.prototype.svar_list = function() {
    return this.getTypedRuleContext(Svar_listContext,0);
};

Mvar_exprContext.prototype.SMMULGF = function() {
    return this.getToken(CADLParser.SMMULGF, 0);
};

Mvar_exprContext.prototype.MULGF = function() {
    return this.getToken(CADLParser.MULGF, 0);
};

Mvar_exprContext.prototype.MMMULGF = function() {
    return this.getToken(CADLParser.MMMULGF, 0);
};

Mvar_exprContext.prototype.SMMUL = function() {
    return this.getToken(CADLParser.SMMUL, 0);
};

Mvar_exprContext.prototype.MUL = function() {
    return this.getToken(CADLParser.MUL, 0);
};

Mvar_exprContext.prototype.MMMUL = function() {
    return this.getToken(CADLParser.MMMUL, 0);
};

Mvar_exprContext.prototype.ADD = function() {
    return this.getToken(CADLParser.ADD, 0);
};

Mvar_exprContext.prototype.SUB = function() {
    return this.getToken(CADLParser.SUB, 0);
};

Mvar_exprContext.prototype.BAND = function() {
    return this.getToken(CADLParser.BAND, 0);
};

Mvar_exprContext.prototype.BOR = function() {
    return this.getToken(CADLParser.BOR, 0);
};

Mvar_exprContext.prototype.BXOR = function() {
    return this.getToken(CADLParser.BXOR, 0);
};

Mvar_exprContext.prototype.MPERM = function() {
    return this.getToken(CADLParser.MPERM, 0);
};

Mvar_exprContext.prototype.MSUBST = function() {
    return this.getToken(CADLParser.MSUBST, 0);
};

Mvar_exprContext.prototype.MHCON = function() {
    return this.getToken(CADLParser.MHCON, 0);
};

Mvar_exprContext.prototype.MVCON = function() {
    return this.getToken(CADLParser.MVCON, 0);
};

Mvar_exprContext.prototype.MMAP = function() {
    return this.getToken(CADLParser.MMAP, 0);
};

Mvar_exprContext.prototype.SFUNC_ID = function() {
    return this.getToken(CADLParser.SFUNC_ID, 0);
};

Mvar_exprContext.prototype.MFOLD = function() {
    return this.getToken(CADLParser.MFOLD, 0);
};

Mvar_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterMvar_expr(this);
	}
};

Mvar_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitMvar_expr(this);
	}
};

Mvar_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitMvar_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CADLParser.prototype.mvar_expr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Mvar_exprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 32;
    this.enterRecursionRule(localctx, 32, CADLParser.RULE_mvar_expr, _p);
     name = ""; x_msb=x_lsb=y_msb=y_lsb=z_msb=z_lsb=-1;
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 438;
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            this.state = 403;
            this.match(CADLParser.BNOT);
            this.state = 404;
            localctx.fst = this.mvar_expr(13);
            localctx.r_codes =  "\%~"+localctx.fst.r_codes
            break;

        case 2:
            this.state = 407;
            this.match(CADLParser.MTRAN);
            this.state = 408;
            localctx.fst = this.mvar_expr(6);
            localctx.r_codes =  "\%@-|"+localctx.fst.r_codes
            break;

        case 3:
            this.state = 411;
            this.match(CADLParser.LPARENT);
            this.state = 412;
            localctx.fst = this.mvar_expr(0);
            this.state = 413;
            this.match(CADLParser.RPARENT);
            localctx.r_codes =  "("+localctx.fst.r_codes+")"
            break;

        case 4:
            this.state = 416;
            localctx.n = this.match(CADLParser.MVAR_ID);
            localctx.r_codes =  this.pfx+(localctx.n===null ? null : localctx.n.text)
            break;

        case 5:
            this.state = 418;
            localctx._mvar_func_ref = this.mvar_func_ref();
            localctx.r_codes =  localctx._mvar_func_ref.r_codes
            break;

        case 6:
            this.state = 421;
            localctx._mvar_item_block = this.mvar_item_block();
            localctx.r_codes =  localctx._mvar_item_block.r_codes
            break;

        case 7:
            this.state = 424;
            this.match(CADLParser.MATRIX_T);
            this.state = 425;
            this.match(CADLParser.LBRACKET);
            this.state = 426;
            localctx.dx = this.svar_expr(0);
            this.state = 427;
            this.match(CADLParser.COMMA);
            this.state = 428;
            localctx.dy = this.svar_expr(0);
            this.state = 429;
            this.match(CADLParser.COMMA);
            this.state = 430;
            localctx.dz = this.svar_expr(0);
            this.state = 431;
            this.match(CADLParser.RBRACKET);
            this.state = 432;
            this.match(CADLParser.T__0);
            this.state = 433;
            this.match(CADLParser.LBRACKET);
            this.state = 434;
            localctx.v = this.svar_list();
            this.state = 435;
            this.match(CADLParser.RBRACKET);

            	    localctx.r_codes =  "(cMatrixMake ("+localctx.dx.r_codes+", "+localctx.dy.r_codes+", "+localctx.dz.r_codes+") "+localctx.v.r_codes+")"
            	  
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 525;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 523;
                var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 440;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 441;
                    this.match(CADLParser.SMMULGF);
                    this.state = 442;
                    localctx.snd = this.mvar_expr(25);
                    localctx.r_codes =  localctx.fst.r_codes+" *-^ "+localctx.snd.r_codes
                    break;

                case 2:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 445;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 446;
                    this.match(CADLParser.MULGF);
                    this.state = 447;
                    localctx.snd = this.mvar_expr(24);
                    localctx.r_codes =  localctx.fst.r_codes+" *|^ "+localctx.snd.r_codes
                    break;

                case 3:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 450;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 451;
                    this.match(CADLParser.MMMULGF);
                    this.state = 452;
                    localctx.snd = this.mvar_expr(23);
                    localctx.r_codes =  localctx.fst.r_codes+" *@^ "+localctx.snd.r_codes
                    break;

                case 4:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 455;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 456;
                    this.match(CADLParser.SMMUL);
                    this.state = 457;
                    localctx.snd = this.mvar_expr(22);
                    localctx.r_codes =  localctx.fst.r_codes+" *- "+localctx.snd.r_codes
                    break;

                case 5:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 460;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 461;
                    this.match(CADLParser.MUL);
                    this.state = 462;
                    localctx.snd = this.mvar_expr(21);
                    localctx.r_codes =  localctx.fst.r_codes+" *| "+localctx.snd.r_codes
                    break;

                case 6:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 465;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 466;
                    this.match(CADLParser.MMMUL);
                    this.state = 467;
                    localctx.snd = this.mvar_expr(20);
                    localctx.r_codes =  localctx.fst.r_codes+" *@ "+localctx.snd.r_codes
                    break;

                case 7:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 470;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 471;
                    this.match(CADLParser.ADD);
                    this.state = 472;
                    localctx.snd = this.mvar_expr(19);
                    localctx.r_codes =  localctx.fst.r_codes+" +@ "+localctx.snd.r_codes
                    break;

                case 8:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 475;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 476;
                    this.match(CADLParser.SUB);
                    this.state = 477;
                    localctx.snd = this.mvar_expr(18);
                    localctx.r_codes =  localctx.fst.r_codes+" -@ "+localctx.snd.r_codes
                    break;

                case 9:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 480;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 481;
                    this.match(CADLParser.BAND);
                    this.state = 482;
                    localctx.snd = this.mvar_expr(17);
                    localctx.r_codes =  localctx.fst.r_codes+" &@ "+localctx.snd.r_codes
                    break;

                case 10:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 485;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 486;
                    this.match(CADLParser.BOR);
                    this.state = 487;
                    localctx.snd = this.mvar_expr(16);
                    localctx.r_codes =  localctx.fst.r_codes+" |@ "+localctx.snd.r_codes
                    break;

                case 11:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 490;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 491;
                    this.match(CADLParser.BXOR);
                    this.state = 492;
                    localctx.snd = this.mvar_expr(15);
                    localctx.r_codes =  localctx.fst.r_codes+" ^@ "+localctx.snd.r_codes
                    break;

                case 12:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 495;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 496;
                    this.match(CADLParser.MPERM);
                    this.state = 497;
                    localctx.snd = this.mvar_expr(13);
                    localctx.r_codes =  localctx.fst.r_codes+" \%@> "+localctx.snd.r_codes
                    break;

                case 13:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 500;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 501;
                    this.match(CADLParser.MSUBST);
                    this.state = 502;
                    localctx.snd = this.mvar_expr(12);
                    localctx.r_codes =  localctx.fst.r_codes+" \%@< "+localctx.snd.r_codes
                    break;

                case 14:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 505;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 506;
                    this.match(CADLParser.MHCON);
                    this.state = 507;
                    localctx.snd = this.mvar_expr(9);
                    localctx.r_codes =  localctx.fst.r_codes+" \%@- "+localctx.snd.r_codes
                    break;

                case 15:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 510;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 511;
                    this.match(CADLParser.MVCON);
                    this.state = 512;
                    localctx.snd = this.mvar_expr(8);
                    localctx.r_codes =  localctx.fst.r_codes+" \%@| "+localctx.snd.r_codes
                    break;

                case 16:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 515;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 516;
                    this.match(CADLParser.MMAP);
                    this.state = 517;
                    localctx.fn = this.match(CADLParser.SFUNC_ID);
                    localctx.r_codes =  localctx.fst.r_codes+" \%@|> "+this.pfx+(localctx.fn===null ? null : localctx.fn.text)
                    break;

                case 17:
                    localctx = new Mvar_exprContext(this, _parentctx, _parentState);
                    localctx.fst = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, CADLParser.RULE_mvar_expr);
                    this.state = 519;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 520;
                    this.match(CADLParser.MFOLD);
                    this.state = 521;
                    localctx.fn = this.match(CADLParser.SFUNC_ID);
                    localctx.r_codes =  localctx.fst.r_codes+" \%@|< "+this.pfx+(localctx.fn===null ? null : localctx.fn.text)
                    break;

                } 
            }
            this.state = 527;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Block_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_block_stmt;
    this.r_codes = null
    this._stmt = null; // StmtContext
    return this;
}

Block_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_stmtContext.prototype.constructor = Block_stmtContext;

Block_stmtContext.prototype.KEYWD_BEGIN = function() {
    return this.getToken(CADLParser.KEYWD_BEGIN, 0);
};

Block_stmtContext.prototype.KEYWD_END = function() {
    return this.getToken(CADLParser.KEYWD_END, 0);
};

Block_stmtContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

Block_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterBlock_stmt(this);
	}
};

Block_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitBlock_stmt(this);
	}
};

Block_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitBlock_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Block_stmtContext = Block_stmtContext;

CADLParser.prototype.block_stmt = function() {

    var localctx = new Block_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CADLParser.RULE_block_stmt);
    localctx.r_codes = ""
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 528;
        this.match(CADLParser.KEYWD_BEGIN);
        this.state = 532; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 529;
            localctx._stmt = this.stmt();
            localctx.r_codes += localctx._stmt.r_codes;
            this.state = 534; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 6)) & ~0x1f) == 0 && ((1 << (_la - 6)) & ((1 << (CADLParser.SEMICOLON - 6)) | (1 << (CADLParser.LPARENT - 6)) | (1 << (CADLParser.LNOT - 6)) | (1 << (CADLParser.BNOT - 6)))) !== 0) || ((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (CADLParser.MTRAN - 41)) | (1 << (CADLParser.KEYWD_LET - 41)) | (1 << (CADLParser.KEYWD_SET - 41)) | (1 << (CADLParser.KEYWD_LOOPDOWN - 41)) | (1 << (CADLParser.KEYWD_LOOPUP - 41)) | (1 << (CADLParser.KEYWD_BREAK - 41)) | (1 << (CADLParser.KEYWD_IF - 41)) | (1 << (CADLParser.KEYWD_BEGIN - 41)) | (1 << (CADLParser.INPUT - 41)) | (1 << (CADLParser.OUTPUT - 41)) | (1 << (CADLParser.PRINT - 41)) | (1 << (CADLParser.MATRIX_T - 41)) | (1 << (CADLParser.SVAR_ID - 41)) | (1 << (CADLParser.MVAR_ID - 41)) | (1 << (CADLParser.SFUNC_ID - 41)) | (1 << (CADLParser.MFUNC_ID - 41)) | (1 << (CADLParser.HEX_LITERAL - 41)) | (1 << (CADLParser.DEC_LITERAL - 41)))) !== 0));
        this.state = 536;
        this.match(CADLParser.KEYWD_END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_stmt;
    this.r_codes = null
    this._definition = null; // DefinitionContext
    this._ctrl_stmt = null; // Ctrl_stmtContext
    this._output_stmt = null; // Output_stmtContext
    this._print_stmt = null; // Print_stmtContext
    this._if_stmt = null; // If_stmtContext
    this._loop_stmt = null; // Loop_stmtContext
    this._svar_expr = null; // Svar_exprContext
    this._mvar_expr = null; // Mvar_exprContext
    this._block_stmt = null; // Block_stmtContext
    return this;
}

StmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StmtContext.prototype.constructor = StmtContext;

StmtContext.prototype.definition = function() {
    return this.getTypedRuleContext(DefinitionContext,0);
};

StmtContext.prototype.ctrl_stmt = function() {
    return this.getTypedRuleContext(Ctrl_stmtContext,0);
};

StmtContext.prototype.output_stmt = function() {
    return this.getTypedRuleContext(Output_stmtContext,0);
};

StmtContext.prototype.print_stmt = function() {
    return this.getTypedRuleContext(Print_stmtContext,0);
};

StmtContext.prototype.if_stmt = function() {
    return this.getTypedRuleContext(If_stmtContext,0);
};

StmtContext.prototype.loop_stmt = function() {
    return this.getTypedRuleContext(Loop_stmtContext,0);
};

StmtContext.prototype.svar_expr = function() {
    return this.getTypedRuleContext(Svar_exprContext,0);
};

StmtContext.prototype.mvar_expr = function() {
    return this.getTypedRuleContext(Mvar_exprContext,0);
};

StmtContext.prototype.block_stmt = function() {
    return this.getTypedRuleContext(Block_stmtContext,0);
};

StmtContext.prototype.SEMICOLON = function() {
    return this.getToken(CADLParser.SEMICOLON, 0);
};

StmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterStmt(this);
	}
};

StmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitStmt(this);
	}
};

StmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.StmtContext = StmtContext;

CADLParser.prototype.stmt = function() {

    var localctx = new StmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CADLParser.RULE_stmt);
    try {
        this.state = 567;
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 538;
            localctx._definition = this.definition();
            localctx.r_codes =  localctx._definition.r_codes
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 541;
            localctx._ctrl_stmt = this.ctrl_stmt();
            localctx.r_codes =  localctx._ctrl_stmt.r_codes
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 544;
            localctx._output_stmt = this.output_stmt();
            localctx.r_codes =  localctx._output_stmt.r_codes
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 547;
            localctx._print_stmt = this.print_stmt();
            localctx.r_codes =  localctx._print_stmt.r_codes
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 550;
            localctx._if_stmt = this.if_stmt();
            localctx.r_codes =  localctx._if_stmt.r_codes
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 553;
            localctx._loop_stmt = this.loop_stmt();
            localctx.r_codes =  localctx._loop_stmt.r_codes
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 556;
            localctx._svar_expr = this.svar_expr(0);
            localctx.r_codes =  this.indent(localctx._svar_expr.r_codes+"\n");
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 559;
            localctx._mvar_expr = this.mvar_expr(0);
            localctx.r_codes =  this.indent(localctx._mvar_expr.r_codes+"\n");
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 562;
            localctx._block_stmt = this.block_stmt();
            localctx.r_codes =  localctx._block_stmt.r_codes
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 565;
            this.match(CADLParser.SEMICOLON);
            localctx.r_codes =  this.indent(";\n");
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ctrl_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_ctrl_stmt;
    this.r_codes = null
    return this;
}

Ctrl_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ctrl_stmtContext.prototype.constructor = Ctrl_stmtContext;

Ctrl_stmtContext.prototype.KEYWD_BREAK = function() {
    return this.getToken(CADLParser.KEYWD_BREAK, 0);
};

Ctrl_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterCtrl_stmt(this);
	}
};

Ctrl_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitCtrl_stmt(this);
	}
};

Ctrl_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitCtrl_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Ctrl_stmtContext = Ctrl_stmtContext;

CADLParser.prototype.ctrl_stmt = function() {

    var localctx = new Ctrl_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CADLParser.RULE_ctrl_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 569;
        this.match(CADLParser.KEYWD_BREAK);
        localctx.r_codes =  this.indent("break\n");
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Output_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_output_stmt;
    this.r_codes = null
    this._SVAR_ID = null; // Token
    this._MVAR_ID = null; // Token
    return this;
}

Output_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Output_stmtContext.prototype.constructor = Output_stmtContext;

Output_stmtContext.prototype.OUTPUT = function() {
    return this.getToken(CADLParser.OUTPUT, 0);
};

Output_stmtContext.prototype.LPARENT = function() {
    return this.getToken(CADLParser.LPARENT, 0);
};

Output_stmtContext.prototype.SVAR_ID = function() {
    return this.getToken(CADLParser.SVAR_ID, 0);
};

Output_stmtContext.prototype.RPARENT = function() {
    return this.getToken(CADLParser.RPARENT, 0);
};

Output_stmtContext.prototype.MVAR_ID = function() {
    return this.getToken(CADLParser.MVAR_ID, 0);
};

Output_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterOutput_stmt(this);
	}
};

Output_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitOutput_stmt(this);
	}
};

Output_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitOutput_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Output_stmtContext = Output_stmtContext;

CADLParser.prototype.output_stmt = function() {

    var localctx = new Output_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CADLParser.RULE_output_stmt);
    try {
        this.state = 582;
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 572;
            this.match(CADLParser.OUTPUT);
            this.state = 573;
            this.match(CADLParser.LPARENT);
            this.state = 574;
            localctx._SVAR_ID = this.match(CADLParser.SVAR_ID);
            this.state = 575;
            this.match(CADLParser.RPARENT);
            localctx.r_codes =  this.indent("cOutputSvar "+this.pfx+(localctx._SVAR_ID===null ? null : localctx._SVAR_ID.text)+' "'+(localctx._SVAR_ID===null ? null : localctx._SVAR_ID.text)+'"')
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 577;
            this.match(CADLParser.OUTPUT);
            this.state = 578;
            this.match(CADLParser.LPARENT);
            this.state = 579;
            localctx._MVAR_ID = this.match(CADLParser.MVAR_ID);
            this.state = 580;
            this.match(CADLParser.RPARENT);
            localctx.r_codes =  this.indent("cOutputMvar "+this.pfx+(localctx._MVAR_ID===null ? null : localctx._MVAR_ID.text)+' "'+(localctx._MVAR_ID===null ? null : localctx._MVAR_ID.text)+'"')
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Print_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_print_stmt;
    this.r_codes = null
    this._SVAR_ID = null; // Token
    this._MVAR_ID = null; // Token
    return this;
}

Print_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Print_stmtContext.prototype.constructor = Print_stmtContext;

Print_stmtContext.prototype.PRINT = function() {
    return this.getToken(CADLParser.PRINT, 0);
};

Print_stmtContext.prototype.LPARENT = function() {
    return this.getToken(CADLParser.LPARENT, 0);
};

Print_stmtContext.prototype.SVAR_ID = function() {
    return this.getToken(CADLParser.SVAR_ID, 0);
};

Print_stmtContext.prototype.RPARENT = function() {
    return this.getToken(CADLParser.RPARENT, 0);
};

Print_stmtContext.prototype.MVAR_ID = function() {
    return this.getToken(CADLParser.MVAR_ID, 0);
};

Print_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterPrint_stmt(this);
	}
};

Print_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitPrint_stmt(this);
	}
};

Print_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitPrint_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Print_stmtContext = Print_stmtContext;

CADLParser.prototype.print_stmt = function() {

    var localctx = new Print_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CADLParser.RULE_print_stmt);
    try {
        this.state = 594;
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 584;
            this.match(CADLParser.PRINT);
            this.state = 585;
            this.match(CADLParser.LPARENT);
            this.state = 586;
            localctx._SVAR_ID = this.match(CADLParser.SVAR_ID);
            this.state = 587;
            this.match(CADLParser.RPARENT);
            localctx.r_codes =  this.indent("cPrintSvar "+this.pfx+(localctx._SVAR_ID===null ? null : localctx._SVAR_ID.text)+' "'+(localctx._SVAR_ID===null ? null : localctx._SVAR_ID.text)+'"')
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 589;
            this.match(CADLParser.PRINT);
            this.state = 590;
            this.match(CADLParser.LPARENT);
            this.state = 591;
            localctx._MVAR_ID = this.match(CADLParser.MVAR_ID);
            this.state = 592;
            this.match(CADLParser.RPARENT);
            localctx.r_codes =  this.indent("cPrintMvar "+this.pfx+(localctx._MVAR_ID===null ? null : localctx._MVAR_ID.text)+' "'+(localctx._MVAR_ID===null ? null : localctx._MVAR_ID.text)+'"')
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_if_stmt;
    this.r_codes = null
    this._svar_expr = null; // Svar_exprContext
    this.ifb = null; // Block_stmtContext
    this.elb = null; // Block_stmtContext
    return this;
}

If_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_stmtContext.prototype.constructor = If_stmtContext;

If_stmtContext.prototype.KEYWD_IF = function() {
    return this.getToken(CADLParser.KEYWD_IF, 0);
};

If_stmtContext.prototype.svar_expr = function() {
    return this.getTypedRuleContext(Svar_exprContext,0);
};

If_stmtContext.prototype.block_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Block_stmtContext);
    } else {
        return this.getTypedRuleContext(Block_stmtContext,i);
    }
};

If_stmtContext.prototype.KEYWD_ELSE = function() {
    return this.getToken(CADLParser.KEYWD_ELSE, 0);
};

If_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterIf_stmt(this);
	}
};

If_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitIf_stmt(this);
	}
};

If_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitIf_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.If_stmtContext = If_stmtContext;

CADLParser.prototype.if_stmt = function() {

    var localctx = new If_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CADLParser.RULE_if_stmt);

              localctx.r_codes =  ""
              this.indent_level++;
            
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 596;
        this.match(CADLParser.KEYWD_IF);
        localctx.r_codes += this.indentN("if ", this.indent_level-1);
        this.state = 598;
        localctx._svar_expr = this.svar_expr(0);
        localctx.r_codes += "("+localctx._svar_expr.r_codes+") then begin\n";
        this.state = 600;
        localctx.ifb = this.block_stmt();

                                 localctx.r_codes += localctx.ifb.r_codes;
                                 localctx.r_codes += this.indentN("end\n", this.indent_level-1);
                               
        this.state = 607;
        _la = this._input.LA(1);
        if(_la===CADLParser.KEYWD_ELSE) {
            this.state = 602;
            this.match(CADLParser.KEYWD_ELSE);

                                  localctx.r_codes =  localctx.r_codes.replace(/\s*\n$/, "")
                                  localctx.r_codes += " else begin\n";
                                  //this.indent_level++;
                                
            this.state = 604;
            localctx.elb = this.block_stmt();

                                      localctx.r_codes += localctx.elb.r_codes;
                                      //this.indent_level--;
                                      localctx.r_codes += this.indentN("end\n", this.indent_level-1);
                                    
        }


                  this.indent_level--;
                
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Loop_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_loop_stmt;
    this.r_codes = null
    this._SVAR_ID = null; // Token
    this._svar_expr = null; // Svar_exprContext
    this._block_stmt = null; // Block_stmtContext
    return this;
}

Loop_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Loop_stmtContext.prototype.constructor = Loop_stmtContext;

Loop_stmtContext.prototype.KEYWD_LOOPUP = function() {
    return this.getToken(CADLParser.KEYWD_LOOPUP, 0);
};

Loop_stmtContext.prototype.LPARENT = function() {
    return this.getToken(CADLParser.LPARENT, 0);
};

Loop_stmtContext.prototype.SVAR_ID = function() {
    return this.getToken(CADLParser.SVAR_ID, 0);
};

Loop_stmtContext.prototype.svar_expr = function() {
    return this.getTypedRuleContext(Svar_exprContext,0);
};

Loop_stmtContext.prototype.RPARENT = function() {
    return this.getToken(CADLParser.RPARENT, 0);
};

Loop_stmtContext.prototype.block_stmt = function() {
    return this.getTypedRuleContext(Block_stmtContext,0);
};

Loop_stmtContext.prototype.KEYWD_LOOPDOWN = function() {
    return this.getToken(CADLParser.KEYWD_LOOPDOWN, 0);
};

Loop_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterLoop_stmt(this);
	}
};

Loop_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitLoop_stmt(this);
	}
};

Loop_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitLoop_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Loop_stmtContext = Loop_stmtContext;

CADLParser.prototype.loop_stmt = function() {

    var localctx = new Loop_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CADLParser.RULE_loop_stmt);
    this.indent_level++; 
    try {
        this.state = 627;
        switch(this._input.LA(1)) {
        case CADLParser.KEYWD_LOOPUP:
            this.enterOuterAlt(localctx, 1);
            this.state = 609;
            this.match(CADLParser.KEYWD_LOOPUP);
            this.state = 610;
            this.match(CADLParser.LPARENT);
            this.state = 611;
            localctx._SVAR_ID = this.match(CADLParser.SVAR_ID);
            this.state = 612;
            this.match(CADLParser.ASSIGN);
            this.state = 613;
            localctx._svar_expr = this.svar_expr(0);
            this.state = 614;
            this.match(CADLParser.RPARENT);
            this.state = 615;
            localctx._block_stmt = this.block_stmt();

                                             localctx.r_codes =  this.indentN("for "+this.pfx+(localctx._SVAR_ID===null ? null : localctx._SVAR_ID.text)+"=0 to "+localctx._svar_expr.r_codes+" do\n", this.indent_level-1)
                                             localctx.r_codes += localctx._block_stmt.r_codes;
                                             localctx.r_codes += this.indentN("done\n", this.indent_level-1);
                                            
            break;
        case CADLParser.KEYWD_LOOPDOWN:
            this.enterOuterAlt(localctx, 2);
            this.state = 618;
            this.match(CADLParser.KEYWD_LOOPDOWN);
            this.state = 619;
            this.match(CADLParser.LPARENT);
            this.state = 620;
            localctx._SVAR_ID = this.match(CADLParser.SVAR_ID);
            this.state = 621;
            this.match(CADLParser.ASSIGN);
            this.state = 622;
            localctx._svar_expr = this.svar_expr(0);
            this.state = 623;
            this.match(CADLParser.RPARENT);
            this.state = 624;
            localctx._block_stmt = this.block_stmt();

                                             localctx.r_codes =  this.indentN("for "+this.pfx+(localctx._SVAR_ID===null ? null : localctx._SVAR_ID.text)+"="+localctx._svar_expr.r_codes+" downto 0 do\n", this.indent_level-1)
                                             localctx.r_codes += localctx._block_stmt.r_codes;
                                             localctx.r_codes += this.indentN("done\n", this.indent_level-1);
                                            
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.indent_level--;
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_func_def;
    this.r_codes = null
    this.name = null; // Token
    this.arg0 = null; // Token
    this.arg = null; // Token
    this.sts = null; // Block_stmtContext
    return this;
}

Func_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_defContext.prototype.constructor = Func_defContext;

Func_defContext.prototype.KEYWD_LET = function() {
    return this.getToken(CADLParser.KEYWD_LET, 0);
};

Func_defContext.prototype.LPARENT = function() {
    return this.getToken(CADLParser.LPARENT, 0);
};

Func_defContext.prototype.RPARENT = function() {
    return this.getToken(CADLParser.RPARENT, 0);
};

Func_defContext.prototype.ASSIGN = function() {
    return this.getToken(CADLParser.ASSIGN, 0);
};

Func_defContext.prototype.block_stmt = function() {
    return this.getTypedRuleContext(Block_stmtContext,0);
};

Func_defContext.prototype.SFUNC_ID = function() {
    return this.getToken(CADLParser.SFUNC_ID, 0);
};

Func_defContext.prototype.MFUNC_ID = function() {
    return this.getToken(CADLParser.MFUNC_ID, 0);
};

Func_defContext.prototype.SVAR_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CADLParser.SVAR_ID);
    } else {
        return this.getToken(CADLParser.SVAR_ID, i);
    }
};


Func_defContext.prototype.MVAR_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CADLParser.MVAR_ID);
    } else {
        return this.getToken(CADLParser.MVAR_ID, i);
    }
};


Func_defContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CADLParser.COMMA);
    } else {
        return this.getToken(CADLParser.COMMA, i);
    }
};


Func_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterFunc_def(this);
	}
};

Func_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitFunc_def(this);
	}
};

Func_defContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitFunc_def(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Func_defContext = Func_defContext;

CADLParser.prototype.func_def = function() {

    var localctx = new Func_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CADLParser.RULE_func_def);

            this.func_level++;
            this.indent_level++;
           
    var _la = 0; // Token type
    try {
        this.state = 657;
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 629;
            this.match(CADLParser.KEYWD_LET);
            this.state = 630;
            localctx.name = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===CADLParser.SFUNC_ID || _la===CADLParser.MFUNC_ID)) {
                localctx.name = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            localctx.r_codes =  "let rec "+this.pfxu+(localctx.name===null ? null : localctx.name.text)
            this.state = 632;
            this.match(CADLParser.LPARENT);
            localctx.r_codes += " ";
            this.state = 634;
            localctx.arg0 = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===CADLParser.SVAR_ID || _la===CADLParser.MVAR_ID)) {
                localctx.arg0 = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            localctx.r_codes += this.pfx+(localctx.arg0===null ? null : localctx.arg0.text);
            this.state = 641;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CADLParser.COMMA) {
                this.state = 636;
                this.match(CADLParser.COMMA);
                this.state = 637;
                localctx.arg = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===CADLParser.SVAR_ID || _la===CADLParser.MVAR_ID)) {
                    localctx.arg = this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
                localctx.r_codes += " "+this.pfx+(localctx.arg===null ? null : localctx.arg.text);
                this.state = 643;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 644;
            this.match(CADLParser.RPARENT);
            this.state = 645;
            this.match(CADLParser.ASSIGN);
            this.state = 646;
            localctx.sts = this.block_stmt();

            	      localctx.r_codes =  localctx.r_codes.replace(/\s*,$/g, '')
            	      localctx.r_codes += " = begin\n";
            	      localctx.r_codes =  this.indentN(localctx.r_codes, this.indent_level-1)
            	      localctx.r_codes += localctx.sts.r_codes;
            	      localctx.r_codes += this.indentN("end", this.indent_level-1);
            	    
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 649;
            this.match(CADLParser.KEYWD_LET);
            this.state = 650;
            localctx.name = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===CADLParser.SFUNC_ID || _la===CADLParser.MFUNC_ID)) {
                localctx.name = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 651;
            this.match(CADLParser.LPARENT);
            this.state = 652;
            this.match(CADLParser.RPARENT);
            this.state = 653;
            this.match(CADLParser.ASSIGN);
            this.state = 654;
            localctx.sts = this.block_stmt();

            	      localctx.r_codes =  "let rec "+this.pfxu+(localctx.name===null ? null : localctx.name.text)+"() = begin\n"
            	      localctx.r_codes =  this.indentN(localctx.r_codes, this.indent_level-1)
            	      localctx.r_codes += localctx.sts.r_codes;
            	      localctx.r_codes += this.indentN("end", this.indent_level-1);
            	    
            break;

        }

                this.func_level--;
                this.indent_level--;
               
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Var_item_rangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_var_item_range;
    this.r_codes = null
    this.msb = null
    this.lsb = null
    this.imsb = null; // Svar_exprContext
    this.ilsb = null; // Svar_exprContext
    return this;
}

Var_item_rangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Var_item_rangeContext.prototype.constructor = Var_item_rangeContext;

Var_item_rangeContext.prototype.RANGE = function() {
    return this.getToken(CADLParser.RANGE, 0);
};

Var_item_rangeContext.prototype.svar_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Svar_exprContext);
    } else {
        return this.getTypedRuleContext(Svar_exprContext,i);
    }
};

Var_item_rangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterVar_item_range(this);
	}
};

Var_item_rangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitVar_item_range(this);
	}
};

Var_item_rangeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitVar_item_range(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Var_item_rangeContext = Var_item_rangeContext;

CADLParser.prototype.var_item_range = function() {

    var localctx = new Var_item_rangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CADLParser.RULE_var_item_range);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 659;
        localctx.imsb = this.svar_expr(0);
        this.state = 660;
        this.match(CADLParser.RANGE);
        this.state = 661;
        localctx.ilsb = this.svar_expr(0);

        	    localctx.msb =  localctx.imsb.r_codes
        	    localctx.lsb =  localctx.ilsb.r_codes
        	    localctx.r_codes =  localctx.msb+":"+localctx.lsb
        	  
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Var_item_fromtoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_var_item_fromto;
    this.r_codes = null
    this.msb = null
    this.lsb = null
    this.imsb = null; // Svar_exprContext
    this.ilsb = null; // Svar_exprContext
    return this;
}

Var_item_fromtoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Var_item_fromtoContext.prototype.constructor = Var_item_fromtoContext;

Var_item_fromtoContext.prototype.FROMTO = function() {
    return this.getToken(CADLParser.FROMTO, 0);
};

Var_item_fromtoContext.prototype.svar_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Svar_exprContext);
    } else {
        return this.getTypedRuleContext(Svar_exprContext,i);
    }
};

Var_item_fromtoContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterVar_item_fromto(this);
	}
};

Var_item_fromtoContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitVar_item_fromto(this);
	}
};

Var_item_fromtoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitVar_item_fromto(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.Var_item_fromtoContext = Var_item_fromtoContext;

CADLParser.prototype.var_item_fromto = function() {

    var localctx = new Var_item_fromtoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CADLParser.RULE_var_item_fromto);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 664;
        localctx.imsb = this.svar_expr(0);
        this.state = 665;
        this.match(CADLParser.FROMTO);
        this.state = 666;
        localctx.ilsb = this.svar_expr(0);

        	    localctx.msb =  localctx.imsb.r_codes
        	    localctx.lsb =  localctx.ilsb.r_codes
        	    localctx.r_codes =  localctx.msb+".."+localctx.lsb
        	  
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CADLParser.RULE_constant;
    this.r_codes = null
    this._HEX_LITERAL = null; // Token
    this._DEC_LITERAL = null; // Token
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.HEX_LITERAL = function() {
    return this.getToken(CADLParser.HEX_LITERAL, 0);
};

ConstantContext.prototype.DEC_LITERAL = function() {
    return this.getToken(CADLParser.DEC_LITERAL, 0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof CADLListener ) {
        listener.exitConstant(this);
	}
};

ConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CADLVisitor ) {
        return visitor.visitConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CADLParser.ConstantContext = ConstantContext;

CADLParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CADLParser.RULE_constant);
    try {
        this.state = 673;
        switch(this._input.LA(1)) {
        case CADLParser.HEX_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 669;
            localctx._HEX_LITERAL = this.match(CADLParser.HEX_LITERAL);
            localctx.r_codes = (localctx._HEX_LITERAL===null ? null : localctx._HEX_LITERAL.text)
            break;
        case CADLParser.DEC_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 671;
            localctx._DEC_LITERAL = this.match(CADLParser.DEC_LITERAL);
            localctx.r_codes = (localctx._DEC_LITERAL===null ? null : localctx._DEC_LITERAL.text)
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


CADLParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 5:
			return this.svar_expr_sempred(localctx, predIndex);
	case 16:
			return this.mvar_expr_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

CADLParser.prototype.svar_expr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 27);
		case 1:
			return this.precpred(this._ctx, 26);
		case 2:
			return this.precpred(this._ctx, 25);
		case 3:
			return this.precpred(this._ctx, 24);
		case 4:
			return this.precpred(this._ctx, 23);
		case 5:
			return this.precpred(this._ctx, 22);
		case 6:
			return this.precpred(this._ctx, 21);
		case 7:
			return this.precpred(this._ctx, 20);
		case 8:
			return this.precpred(this._ctx, 19);
		case 9:
			return this.precpred(this._ctx, 18);
		case 10:
			return this.precpred(this._ctx, 17);
		case 11:
			return this.precpred(this._ctx, 16);
		case 12:
			return this.precpred(this._ctx, 15);
		case 13:
			return this.precpred(this._ctx, 14);
		case 14:
			return this.precpred(this._ctx, 13);
		case 15:
			return this.precpred(this._ctx, 12);
		case 16:
			return this.precpred(this._ctx, 11);
		case 17:
			return this.precpred(this._ctx, 9);
		case 18:
			return this.precpred(this._ctx, 8);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CADLParser.prototype.mvar_expr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 19:
			return this.precpred(this._ctx, 24);
		case 20:
			return this.precpred(this._ctx, 23);
		case 21:
			return this.precpred(this._ctx, 22);
		case 22:
			return this.precpred(this._ctx, 21);
		case 23:
			return this.precpred(this._ctx, 20);
		case 24:
			return this.precpred(this._ctx, 19);
		case 25:
			return this.precpred(this._ctx, 18);
		case 26:
			return this.precpred(this._ctx, 17);
		case 27:
			return this.precpred(this._ctx, 16);
		case 28:
			return this.precpred(this._ctx, 15);
		case 29:
			return this.precpred(this._ctx, 14);
		case 30:
			return this.precpred(this._ctx, 12);
		case 31:
			return this.precpred(this._ctx, 11);
		case 32:
			return this.precpred(this._ctx, 8);
		case 33:
			return this.precpred(this._ctx, 7);
		case 34:
			return this.precpred(this._ctx, 10);
		case 35:
			return this.precpred(this._ctx, 9);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.CADLParser = CADLParser;
